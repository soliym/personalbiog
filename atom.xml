<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>soliym</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://soliym.top/"/>
  <updated>2019-04-19T04:59:30.687Z</updated>
  <id>http://soliym.top/</id>
  
  <author>
    <name>soliym</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>open vswitch</title>
    <link href="http://soliym.top/2019/04/19/open-vswitch/"/>
    <id>http://soliym.top/2019/04/19/open-vswitch/</id>
    <published>2019-04-19T04:56:10.561Z</published>
    <updated>2019-04-19T04:59:30.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="open-vswitch实验"><a href="#open-vswitch实验" class="headerlink" title="open vswitch实验"></a>open vswitch实验</h3><p>在Terminal下对ovs交换机进行测试；</p><p>对ovs交换机和端口的创建；对端口号的修改，配置完ovs以后查看交换机的状态，以及两个端口号的测试。</p><a id="more"></a><h4 id="ovs各模块"><a href="#ovs各模块" class="headerlink" title="ovs各模块"></a>ovs各模块</h4><table><thead><tr><th>ovs-vswitched</th><th>主要模块</th></tr></thead><tbody><tr><td>ovsdb-server</td><td>轻量级数据库服务器</td></tr><tr><td>ovs-dpctl</td><td>配置switch内核</td></tr><tr><td>ovs-vsctl</td><td>c查询和更新交换机配置</td></tr><tr><td>ovs-appctl</td><td>f发送命令消息</td></tr></tbody></table><h4 id="ovs常用操作"><a href="#ovs常用操作" class="headerlink" title="ovs常用操作"></a>ovs常用操作</h4><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>添加网桥</td><td>ovs-vsctl add-br 交换机名</td></tr><tr><td>删除网桥</td><td>ovs-vsctl del-br 交换机名</td></tr><tr><td>添加端口</td><td>ovs-vsctl add-port 交换机名  端口号</td></tr><tr><td>删除端口</td><td>ovs-vsctl del-port 交换机名  端口号</td></tr><tr><td>连接控制器</td><td>ovs-vsctl set-controller 交换机名 tcp:ip 地址：端口号</td></tr><tr><td>断开控制器</td><td>ovs-vsctl del-controller 交换机名</td></tr><tr><td>列出所有网桥（交换机）</td><td>ovs-vsctl list-br</td></tr><tr><td>列出网桥中的所有端口</td><td>ovs-vsctl list-port 交换机名</td></tr><tr><td>列出所有连接到网卡的网桥</td><td>ovs-vsctl port-to-br 端口号</td></tr><tr><td>查看ovs网络状态</td><td>ovs-vsctl show</td></tr><tr><td>查看ovs端口信息</td><td>ovs-vsctl show 交换机名</td></tr><tr><td>修改端口号</td><td>ovs-vsctl set Interface 端口名 ofport_request=新端口号</td></tr></tbody></table><p>以上为ovs经常用到的操作，也是最基础的操作。下面开始ovs的测试实验。</p><h4 id="open-vswitch"><a href="#open-vswitch" class="headerlink" title="open vswitch"></a>open vswitch</h4><h5 id="ovs交换机创建"><a href="#ovs交换机创建" class="headerlink" title="ovs交换机创建"></a>ovs交换机创建</h5><p>创建一个名为ovs-switch的交换机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl add-br ovs-switch</span><br></pre></td></tr></table></figure><h5 id="端口的配置"><a href="#端口的配置" class="headerlink" title="端口的配置"></a>端口的配置</h5><p>配置一个端口号，名为p0,并设置网络接口为;intrenal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl set Interface p0 type=internal</span><br></pre></td></tr></table></figure><p>设置端口号，如果不自己设置，端口号由系统随机设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl set Interface 端口名 ofport_request=新端口号</span><br></pre></td></tr></table></figure><h5 id="虚拟网络空间配置"><a href="#虚拟网络空间配置" class="headerlink" title="虚拟网络空间配置"></a>虚拟网络空间配置</h5><p>避免与本地网络地址发生冲突，需要创建一个虚拟网络空间，将接口放入当中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns add ns0</span><br><span class="line">sudo ip link set p0 netns ns0</span><br><span class="line">sudo ip netns exec ip addr add 192.168.1.100/24dev p0</span><br><span class="line">sudoip netns ecev ns0 ifconfig p0 promisc up</span><br></pre></td></tr></table></figure><p>创建一个名为ns0的虚拟网络空间，并将端口p0放入其中，给端口p0配置ip 192.168..1.100</p><h5 id="查看ovs交换机"><a href="#查看ovs交换机" class="headerlink" title="查看ovs交换机"></a>查看ovs交换机</h5><p>查看ovs交换机的各个接口属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl show</span><br></pre></td></tr></table></figure><h5 id="测试端口"><a href="#测试端口" class="headerlink" title="测试端口"></a>测试端口</h5><p>两个端口之间相互测试，需要创建两个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns exec ns0 ping 192.168.1.101</span><br></pre></td></tr></table></figure><p>192.168.1.101为第二个端口的ip</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;open-vswitch实验&quot;&gt;&lt;a href=&quot;#open-vswitch实验&quot; class=&quot;headerlink&quot; title=&quot;open vswitch实验&quot;&gt;&lt;/a&gt;open vswitch实验&lt;/h3&gt;&lt;p&gt;在Terminal下对ovs交换机进行测试；&lt;/p&gt;
&lt;p&gt;对ovs交换机和端口的创建；对端口号的修改，配置完ovs以后查看交换机的状态，以及两个端口号的测试。&lt;/p&gt;
    
    </summary>
    
      <category term="SDN" scheme="http://soliym.top/categories/SDN/"/>
    
    
      <category term="vswitch" scheme="http://soliym.top/tags/vswitch/"/>
    
  </entry>
  
  <entry>
    <title>2n皇后</title>
    <link href="http://soliym.top/2019/04/11/2n%E7%9A%87%E5%90%8E/"/>
    <id>http://soliym.top/2019/04/11/2n皇后/</id>
    <published>2019-04-11T12:37:08.115Z</published>
    <updated>2019-04-11T12:39:37.505Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</p><a id="more"></a><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>　　输入的第一行为一个整数n，表示棋盘的大小。<br>　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>　　输出一个整数，表示总共有多少种放法。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>4<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1</p><p>样例输出</p><p>2</p><p>样例输入</p><p>4<br>1 0 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1</p><p>样例输出</p><p>0</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>2n皇后问题是在n皇后的问题上扩展而来，涉及搜索、模拟、n皇后问题，要解决2n皇后问题先要解决n皇后问题，n皇后在前面已经写了，现在来解决2n皇后的问题。</p><p>2n皇后实际是在在棋盘上先放一种皇后，然后再放另一种皇后，已经放过皇后的位置就不能再放皇后，所以首先记录白皇后的位置，然后再放黑皇后，需要一个二维数组来模拟棋盘，初始时，这个棋盘上是0或1，0表示不可以放皇后，1表示可以放皇后的，在开始放白皇后的时候，如果白皇后可以在棋盘上放置，那么记录该位置，将该位置标记为2，代表放置的是白皇后，当所有的白皇后放置完以后，计数器现在为n代表白皇后放置完，然后放置黑皇后，放置黑皇后时，如果放置位置是2那么，则代表位置是白皇后，那么该位置不能再放置黑皇后。按照放置白皇后的方法放置黑皇后。放置方法仍然采用回溯法。</p><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><h5 id="放置位置检查是否合适"><a href="#放置位置检查是否合适" class="headerlink" title="放置位置检查是否合适"></a>放置位置检查是否合适</h5><h6 id="一种皇后算法"><a href="#一种皇后算法" class="headerlink" title="一种皇后算法"></a>一种皇后算法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//皇后的放置位置是否合适</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//x为行，y为列</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y==a[i]||<span class="built_in">abs</span>(x-i)==<span class="built_in">abs</span>(y-a[i]))</span><br><span class="line"><span class="comment">//判断是否在同一列或同斜行</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="两种皇后算法"><a href="#两种皇后算法" class="headerlink" title="两种皇后算法"></a>两种皇后算法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x, int y,int s)//x为行，y为列</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">for (i = 0; i &lt; x; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (y == (s==2?a[i]:c[i]) || abs(x - i) == abs(y - (s == 2 ? a[i] : c[i])))</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在放置一种的基础上添加标志，当s==2时表示放置白皇后，所用到的是a数组，当s==3时，表示放置黑皇后，所用到的是c数组。a数组用来记录白皇后在各行的位置。c数组表示黑皇后在各行的位置。</p><h5 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h5><h6 id="一种皇后回溯"><a href="#一种皇后回溯" class="headerlink" title="一种皇后回溯"></a>一种皇后回溯</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void king(int k)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if(k==n)//如果n皇后符合位置，合法方案加一</span><br><span class="line">&#123;</span><br><span class="line">count++;//合法方案计数</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(check(k,i))/*判断是否能放皇后，如果可以则记录皇后的所在的列，然后递归到下一行，如果不满足则回溯至上一行*/</span><br><span class="line">&#123;</span><br><span class="line">a[k]=i;</span><br><span class="line">king(k+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="两种皇后回溯"><a href="#两种皇后回溯" class="headerlink" title="两种皇后回溯"></a>两种皇后回溯</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void king(int k,int s)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if (k == n)</span><br><span class="line">&#123;</span><br><span class="line">if (s==2)king(0, 3);//s==3时放置黑皇后</span><br><span class="line">else count++;//如果白皇后和黑皇后都等于n则计数器加一</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for (i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (b[k][i] != 2 &amp;&amp; b[k][i] != 0 &amp;&amp; check(k, i,s))//与放置一种相比，增加两种条件，所放位置上不能等0或不能等2</span><br><span class="line">&#123;</span><br><span class="line">s==2?a[k] = i:c[k] = i;</span><br><span class="line">b[k][i] = s;//记录白皇后、黑皇后的位置</span><br><span class="line">king(k + 1,s);//第一行放置完，开始第二行</span><br><span class="line">b[k][i] = 1;//还原棋盘</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>编译器vs2017</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y == (s==<span class="number">2</span>?a[i]:c[i]) || <span class="built_in">abs</span>(x - i) == <span class="built_in">abs</span>(y - (s == <span class="number">2</span> ? a[i] : c[i])))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">king</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (k == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s==<span class="number">2</span>)king(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[k][i] != <span class="number">2</span> &amp;&amp; b[k][i] != <span class="number">0</span> &amp;&amp; check(k, i,s))</span><br><span class="line">&#123;</span><br><span class="line">s==<span class="number">2</span>?a[k] = i:c[k] = i;</span><br><span class="line">b[k][i] = s;</span><br><span class="line">king(k + <span class="number">1</span>,s);</span><br><span class="line">b[k][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">    scanf_s(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;b[i][j]);</span><br><span class="line">king(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;h5 id=&quot;问题描述-1&quot;&gt;&lt;a href=&quot;#问题描述-1&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="http://soliym.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>n皇后</title>
    <link href="http://soliym.top/2019/04/06/n%E7%9A%87%E5%90%8E/"/>
    <id>http://soliym.top/2019/04/06/n皇后/</id>
    <published>2019-04-06T10:10:57.536Z</published>
    <updated>2019-04-06T14:34:57.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>​        n皇后问题是指在一个n*n的国际象棋棋盘上放置n个皇后，使得这n个皇后两均不在同一行、同一列、同一条线上，求合法的方案数。</p><a id="more"></a><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>​       如果采用枚举法判断每一种情况，需要枚举n^2的组合数，如果n=8;南无需要枚举54502232次，如果n再增大，需要枚举的次数就太过庞大。所以采用回溯法，尽量减少不必要的循环，当问题达到边界时，返回上一层，不必再浪费资源。如果只考虑每一行放置一个皇后、每一列也只放置一个皇后。从第一行开始放置皇后，当第一行的皇后确定后，结束循环，开始从下一行开始放置皇后，且放置皇后的位置不能与前面的皇后在同一列或同一条对角线。需要一个判断函数，判定在该位置能否放置皇后。如果一行的所有位置都不能放置皇后，那么回溯至上一行。</p><h5 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h5><p>按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的。</p><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><h5 id="皇后位置比较算法"><a href="#皇后位置比较算法" class="headerlink" title="皇后位置比较算法"></a>皇后位置比较算法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x,int y)//皇后的放置位置是否合适</span><br><span class="line">&#123;//x为行，y为列</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(y==a[i]||abs(x-i)==abs(y-a[i]))</span><br><span class="line">//判断是否在同一列或同斜行</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>每一行放一个皇后，就解决了不在同行的问题。 </p></li><li><p>在第i行的时候，遍历n列，试探位置。和之前所有行放的位置进行比较。 </p></li><li>比较列：当前列col 不等于 之前 所有列。 即col != arr[i]。</li><li>比较斜线， 因为不再同一斜率为1或者-1的斜线。(row - i) / (col - arr[i]) != 1 或 -1 可以取巧用绝对值函数: abs(row-i) != abs(col-arr[i])。<h5 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void king(int k)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if(k==n)//如果n皇后符合位置，合法方案加一</span><br><span class="line">&#123;</span><br><span class="line">count++;//合法方案计数</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(check(k,i))/*判断是否能放皇后，如果可以则记录皇后的所在的列，然后递归到下一行，如果不满足则回溯至上一行*/</span><br><span class="line">&#123;</span><br><span class="line">a[k]=i;</span><br><span class="line">king(k+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  回溯每行放置一个皇后，记录每个皇后所在的列数，如果递归后的结果不符合，则回退至该位置，从该位置继续遍历。回溯的条件有两种，一种是在一行中没有找到适合放置皇后的位置，另一种是符合放置方案，然后回溯，寻找下一个方案。</p><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y==a[i]||<span class="built_in">abs</span>(x-i)==<span class="built_in">abs</span>(y-a[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">king</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(k==n)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check(k,i))</span><br><span class="line">&#123;</span><br><span class="line">a[k]=i;</span><br><span class="line">king(k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">king(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;​        n皇后问题是指在一个n*n的国际象棋棋盘上放置n个皇后，使得这n个皇后两均不在同一行、同一列、同一条线上，求合法的方案数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="http://soliym.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://soliym.top/2019/03/30/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://soliym.top/2019/03/30/贪心算法/</id>
    <published>2019-03-30T06:59:22.507Z</published>
    <updated>2019-03-30T07:03:58.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="贪心算法概述："><a href="#贪心算法概述：" class="headerlink" title="贪心算法概述："></a>贪心算法概述：</h3><p>贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。</p><p>注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。</p><a id="more"></a><h4 id="完美的代价"><a href="#完美的代价" class="headerlink" title="完美的代价"></a>完美的代价</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>　　回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>　　交换的定义是：交换两个相邻的字符<br>　　例如mamad<br>　　第一次交换 ad : mamda<br>　　第二次交换 md : madma<br>　　第三次交换 ma : madam (回文！完美！)</p><p>输入格式</p><p>　　第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)<br>　　第二行是一个字符串，长度为N.只包含小写字母</p><p>输出格式</p><p>　　如果可能，输出最少的交换次数。<br>　　否则输出Impossible</p><p>样例输入</p><p>5<br>mamad</p><p>样例输出</p><p>3</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>​       在输入的字符串中不匹配的字母可能是一个或零，所以可以先找出这个字母，创建一个包含26个空间是数组，分别表示字符串中字母的个数，然后遍历这个数组，如果字母的个数为奇数，则表示该字母为不匹配字母。首先从首字母开始，找到与它匹配的字符，再将它与最后一个字母交换，这样一对匹配的字母就交换完了，如果遇到不匹配的字母，则将它与中间的字母交换，然后在开始遍历。但是问题要求的是相邻的交换，所以这种方法不符合要求。</p><p>​        我们需要相邻交换，所以要找到交换的起点和终点。求解方法和上面类似，先从首字母开始，在从与字符串的另一方向开始，遍历找到与首字母匹配的字母，记录它的位置，从该位置起，将后一个字母向前一个位置移动，直到与最后，记录交换次数，再将首字母元素赋值给最后一个元素，这样一趟交换完成。</p><p>全局循环次数：1 to n/2;      </p><p>每次循环需判断是否为不匹配元素</p><p>匹配元素循环次数：n-i-1 to j(当字母为匹配字母时)</p><p>匹配元素移动次数：j to n-i-1</p><p>不匹配元素循环次数：i to j(当字母为匹配字母时)</p><p>不匹配元素移动次数：j to i</p><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//交换次数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hunwen</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">int</span> y,<span class="keyword">char</span> *z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;y/<span class="number">2</span>;i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(z[i]!=x)&#123;<span class="comment">//匹配字母情况 </span></span><br><span class="line"> j=y-i<span class="number">-1</span>;</span><br><span class="line"> <span class="keyword">while</span>(j!=i&amp;&amp;(z[j]!=z[i]))j--;</span><br><span class="line"> <span class="keyword">for</span>(k=j;k&lt;y-i<span class="number">-1</span>;k++)</span><br><span class="line">   &#123; z[k]=z[k+<span class="number">1</span>];</span><br><span class="line">        count++;</span><br><span class="line">  &#125;</span><br><span class="line"> z[k]=z[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不匹配字母情况 </span></span><br><span class="line">    j=i;</span><br><span class="line">    <span class="keyword">while</span>(j!=y-i<span class="number">-1</span>&amp;&amp;(z[j]!=z[y-i<span class="number">-1</span>]))</span><br><span class="line">    j++;</span><br><span class="line">    <span class="keyword">for</span>(k=j;k&gt;i;k--) &#123;</span><br><span class="line">     z[k]=z[k<span class="number">-1</span>];</span><br><span class="line">     count++;  &#125;</span><br><span class="line">         z[k]=z[y-i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> w;<span class="comment">//记录不匹配字符 </span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">801</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//清除缓存 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> b[a[i]<span class="number">-97</span>]++; <span class="comment">//对字母个数计数 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(b[i]%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">  &#123; w=i+<span class="number">97</span>; j++; &#125;<span class="comment">//遍历找到不匹配字母 </span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span>(j&gt;=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"impossible"</span>);</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> hunwen(w,n,a);<span class="comment">//交换函数 </span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);&#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次循环都使字符串两边的字母匹配，达到局部最优的方案，贪心算法没有固定的算法模式，只有固定的算法思想：局部最优，从而全局最优。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;贪心算法概述：&quot;&gt;&lt;a href=&quot;#贪心算法概述：&quot; class=&quot;headerlink&quot; title=&quot;贪心算法概述：&quot;&gt;&lt;/a&gt;贪心算法概述：&lt;/h3&gt;&lt;p&gt;贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。&lt;/p&gt;
&lt;p&gt;注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="贪心" scheme="http://soliym.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>建站分享</title>
    <link href="http://soliym.top/2018/11/26/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://soliym.top/2018/11/26/关于博客的搭建/</id>
    <published>2018-11-26T14:40:01.936Z</published>
    <updated>2019-03-29T15:27:24.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github-Pages-Hexo"><a href="#Github-Pages-Hexo" class="headerlink" title="Github Pages + Hexo"></a>Github Pages + Hexo</h2><p>  我的博客是Github Pages + Hexo在github上搭建的。<br>  下面是我对搭建博客过程中的一些分享<br><a id="more"></a></p><h3 id="一、-Git、node-js"><a href="#一、-Git、node-js" class="headerlink" title="一、 Git、node.js"></a>一、 Git、node.js</h3><p>  先下载安装好<strong>Git、node.js</strong>，具体的过程参照了网上很多的帖子，很多都不是很详细，对于我这种小白来说就是一种折磨（完全看不懂，虽然学了一点前端的HTML、css、js，但这里完全用不上，到是在后面修改主题的时候到是能看明白了。。。。）这些博客里有一个挺详细的，按照他的过程，很容易就弄出来了（其实也不容易。。。。。出现好多问题，当时就很崩溃，明明按照他的步骤完成的，为啥就不通过呢，只能靠着百度一一解决了。。。<br>  <strong>这个帖子有点小错误，可能是环境和版本不同的原因吧</strong>（我搭建的时候有些地方会出错，需要自己去改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://jantc.cn/2017/04/16/%E5%BB%BA%E7%AB%99%E5%88%86%E4%BA%AB%E4%B9%8BGithub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/</span><br></pre></td></tr></table></figure><h3 id="二、Github"><a href="#二、Github" class="headerlink" title="二、Github"></a>二、Github</h3><p>  在github上申请免费的空间来搭建网页，以前西部数码上购买过一个虚拟主机，很贵，一年要几百大洋，主要是国内的主要备案很麻烦，后来就放弃了。在github上可以搭建一个简单的静态网页，虽然是静态的，但是也可以加入很多功能，比如评论、分享系统。用来写写博客或作为个人的自我接受很好用。没有繁琐的管理，搭建好以后只管写博客就好。<br>  <strong>注册GitHub的时候最好是在chrome浏览器中</strong>，因为可以翻译网页，像我这种还没过四级的渣渣，看见这些英文网站就头疼。。。。<br>  具体的注册步骤就不说了，反正我也是看着别人的帖子弄的。。。这个很容易网上就能找到（我忘了我是在按照那个弄的了）</p><h3 id="三、hexo"><a href="#三、hexo" class="headerlink" title="三、hexo"></a>三、hexo</h3><p>配置完hexo本地就算配置完成了，接下来就是将hexo托管到github。<br>  那个_config.yml有两个，<strong>一个是在hexo文件夹下的，另一个是在主题文件夹下的</strong>，一定要分清楚这两个，后面修改主题配置的时候会对这两个文件进行修改。<br>  到这基础的就弄完了，可以说有个简单的博客就搭建完了，不过这时候页面有点丑（太low而且没啥功能），接下来就是对博客的美化-主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g  </span><br><span class="line">hexo s  </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="四、主题"><a href="#四、主题" class="headerlink" title="四、主题"></a>四、主题</h3><p>我使用的是Material X作为博客的主题，想弄的话可以在我们博客的最下面点<strong>Material X</strong>连接，里面有关于这个主题的修改方法，在最下方有主题的源代码，下载后将文件放在主题文件夹中，上传就Ok了，具体的方法可以百度（有时间是话我会写篇文章来详细说一下我是怎样修改的和遇到的问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xaoxuu.com/blog/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.wushile.top/</span><br></pre></td></tr></table></figure><h2 id="关于搭建博客"><a href="#关于搭建博客" class="headerlink" title="关于搭建博客"></a>关于搭建博客</h2><p>  博客搭建花了大概四天多的时间才完成对博客的简单搭建，第一次弄博客，遇到了很多很多的问题，几乎都快要放弃了，但想想已经花费的很多的时间去做这个博客，就该把它弄完，从无到有，很庆幸坚持到了最后，从一无所知的小白到完成搭建这个博客，学到了很多知识，在网上查找解决问题的时候也见识到了很多。很久都没有这么专注的去做一件事情，每天就想着一件事，就想把这个博客建好，现在终于把基础搭建完了，不足的地方以后再去修改，千里之行始于足下。这是第一次写博客，很多格式都不动，写的很low，没办法，这会已经快一点，也没时间去学了，明天还有课。这两周可能不会对博客再进行大的修改了，还有两周考数据结构，没时间去美化了，等考完试再去博客进行修改吧    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github-Pages-Hexo&quot;&gt;&lt;a href=&quot;#Github-Pages-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Github Pages + Hexo&quot;&gt;&lt;/a&gt;Github Pages + Hexo&lt;/h2&gt;&lt;p&gt;  我的博客是Github Pages + Hexo在github上搭建的。&lt;br&gt;  下面是我对搭建博客过程中的一些分享&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://soliym.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://soliym.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://soliym.top/2018/11/25/hello-world/"/>
    <id>http://soliym.top/2018/11/25/hello-world/</id>
    <published>2018-11-25T08:55:32.795Z</published>
    <updated>2019-03-28T15:00:56.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><a id="more"></a><h3 id="first-personalblog"><a href="#first-personalblog" class="headerlink" title="first personalblog"></a>first personalblog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，世界！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://soliym.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://soliym.top/tags/hexo/"/>
    
  </entry>
  
</feed>
