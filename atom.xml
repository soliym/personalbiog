<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>soliym</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://soliym.top/"/>
  <updated>2019-09-02T04:23:42.076Z</updated>
  <id>http://soliym.top/</id>
  
  <author>
    <name>soliym</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DHCP工作原理</title>
    <link href="http://soliym.top/2019/09/02/DHCP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://soliym.top/2019/09/02/DHCP工作原理/</id>
    <published>2019-09-02T04:12:03.755Z</published>
    <updated>2019-09-02T04:23:42.076Z</updated>
    
    <content type="html"><![CDATA[<p>DHCP 全称Dynamic Host configuration protocol， 动态主机配置协议。 它可以为客户机自动分配IP地址、子网掩码以及缺省网关、DNS服务器的IP地址等TCP/IP参数，</p> <a id="more"></a><h4 id="一、DHCP共有八种报文，不同报文之间的区别除了DHCP数据包本身之外，在封包上-UDP头，IP头、链路层头-也有一些差别"><a href="#一、DHCP共有八种报文，不同报文之间的区别除了DHCP数据包本身之外，在封包上-UDP头，IP头、链路层头-也有一些差别" class="headerlink" title="一、DHCP共有八种报文，不同报文之间的区别除了DHCP数据包本身之外，在封包上(UDP头，IP头、链路层头)也有一些差别"></a>一、DHCP共有八种报文，不同报文之间的区别除了DHCP数据包本身之外，在封包上(UDP头，IP头、链路层头)也有一些差别</h4><p>​      </p><h5 id="1）DHCP-Discover"><a href="#1）DHCP-Discover" class="headerlink" title="1）DHCP Discover"></a>1）DHCP Discover</h5><p>DHCP客户端请求地址时，并不知道DHCP服务器的位置，因此DHCP客户端会在本地网络内以广播方式发送请求报文，这个报文成为Discover报文，目的是发现网络中的DHCP服务器，所有收到Discover报文的DHCP服务器都会发送回应报文，DHCP客户端据此可以知道网络中存在的DHCP服务器的位置。</p><h5 id="2）DHCP-Offer"><a href="#2）DHCP-Offer" class="headerlink" title="2）DHCP Offer"></a>2）DHCP Offer</h5><p>DHCP服务器收到Discover报文后，就会在所配置的地址池中查找一个合适的IP地址，加上相应的租约期限和其他配置信息(如网关、DNS服务器等)，构造一个Offer报文，发送给用户(可以广播、也可以单播)，告知用户本服务器可以为其提供IP地址。(注意，只是告诉client可以提供，是预分配，还需要client通过ARP检测该IP是否重复)</p><h5 id="3）DHCP-Request"><a href="#3）DHCP-Request" class="headerlink" title="3）DHCP Request"></a>3）DHCP Request</h5><p>客户端会在两种情况下发送DHCP Request</p><p>a）DHCP客户端可能会收到来自DHCP服务器的很多Offer，所以必须在这些回应中选择一个。Client通常选择第一个回应Offer报文的服务器作为自己的目标服务器，并回应一个广播Request报文，通告选择的服务器。注意，”Client通常选择第一个回应Offer报文的服务器作为自己的目标服务器”这里存在一个安全问题，如果我们的伪DHCP服务器能比原始DHCP服务器先发送Offer数据包，就能达到欺骗的目的，从而劫持目标用户的流量</p><p>b）获取DHCP客户端成功获取IP地址后，在地址使用租期过去1/2时，会向DHCP服务器发送单播Request报文续延租期，如果没有收到DHCP ACK报文，在租期过去3/4时，会再次发送广播Request报文续延租期。</p><h5 id="4）DHCP-ACK"><a href="#4）DHCP-ACK" class="headerlink" title="4）DHCP ACK"></a>4）DHCP ACK</h5><p>DHCP服务器收到Request报文后，根据Request报文中携带的用户MAC来查找有没有相应的租约记录(即之前的预分配过程中登记的那个MAC)，如果有则发送ACK报文作为回应，通知用户可以使用分配的IP地址。</p><h5 id="5）-DHCP-NAK"><a href="#5）-DHCP-NAK" class="headerlink" title="5） DHCP NAK"></a>5） DHCP NAK</h5><p>如果DHCP服务器收到Request报文后，没有发现有相应的租约记录或者由于某些原因无法正常分配IP地址，则发送NAK报文作为回应，通知用户无法分配合适的IP地址。</p><h5 id="6）DHCP-Release"><a href="#6）DHCP-Release" class="headerlink" title="6）DHCP Release"></a>6）DHCP Release</h5><p>当用户不再需要使用分配IP地址时，就会”主动”向DHCP服务器发送Release报文，告知服务器用户不再需要分配IP地址，DHCP服务器会释放被绑定的租约(在数据库中清除某个MAC对某个IP的租约记录，这样，这个IP就可以分配给下一个请求租约的MAC)</p><h5 id="7-DHCP-Decline"><a href="#7-DHCP-Decline" class="headerlink" title="\7. DHCP Decline"></a>\7. DHCP Decline</h5><p>DHCP客户端收到DHCP服务器回应的ACK报文后，通过地址冲突检测发现服务器分配的地址冲突或者由于其他原因导致不能使用，则发送Decline报文，通知服务器所分配的IP地址不可用，我们在手工设置静态IP、或者DHCP分配中有时会遇到”检测到IP冲突”的提示就是因为客户端利用ARP机制来在当前内网中确认当前指定的IP是否已经被占用</p><h5 id="8）DHCP-Inform"><a href="#8）DHCP-Inform" class="headerlink" title="8）DHCP Inform"></a>8）DHCP Inform</h5><p>DHCP客户端如果需要从DHCP服务器端获取更为详细的配置信息，则发送Inform报文向服务器进行请求，服务器收到该报文后，将根据租约进行查找，找到相应的配置信息后，发送ACK报文回应DHCP客户端。</p><h4 id="二、DHCP协议的本质"><a href="#二、DHCP协议的本质" class="headerlink" title="二、DHCP协议的本质"></a>二、DHCP协议的本质</h4><p>DHCP使用UDP进行报文的传输。在主机DHCP获得地址之前，主机并没有有效的IP地址，它是通过受限广播IP地址（全1），当该地址作为目的地址时，子网内的所有主机都能收到该IP数据报。IP层的广播实际上是基于链路层的广播来实现的，所以这里有个前提，即链路层具有广播功能，在以太网中，目的地址为全1的MAC地址可作为链路上的广播地址。只要数据包能够正确到达主机IP层UDP的端口上，则应用程序就能收到该端口上的广播IP包，这正是DHCP设备能正确获得IP地址的本质。</p><p>DHCP客户端使用固定端口号68，而服务器使用固定端口号67。</p><p>DHCP由三种机制分配IP地址：</p><p> 1.自动分配方式：DHCP服务器为主机指定一个永久性的IP地址，一旦DHCP客户端第一次成功从DHCP服务器租用到IP地址，就可以永久使用该地址。</p><p> 2.动态分配方式：DHCP服务器给主机指定一个有时间限制的IP地址， 时间到期或主机明确表示放弃该地址时，该地址可以被其他主机使用。</p><p>  3.手工分配方式：客户端的IP地址是由网络管理员指定的，DHCP服务器只是将指定的IP地址告诉客户端主机。 </p><p>三种地址分配方式中， 只有动态分配方式可以重复使用客户端不再需要的地址</p><h4 id="三、DHCP工作流程"><a href="#三、DHCP工作流程" class="headerlink" title="三、DHCP工作流程"></a>三、DHCP工作流程</h4><p><img src="/2019/09/02/DHCP工作原理/D:/网站文件\personalblog\hexo\source\_posts\DHCP工作原理\DHCP.png" alt=""></p><p>1、客户端以广播的方式发送DHCP_DISCOVER报文，广播的范围的服务器都能接收到该报文。</p><p>2、所有的DHCP服务器都会对该报文进行响应，向DHCP客户端发送DHCP_OFFER报文，报文中的     Your（Client）IP Address字段携带了分配给客户端的IP地址，同时服务器的IP地址放在报文中的option字段中以便客户端可以区分，服务器分配后IP地址给客户端后，会把该地址分配记录下来。</p><p>3、DHCP客户端可能收到多个服务器的DHCP_OFFER报文，但是它只能对其中的一个做响应，通常DHCP客户端处理最先收到的DHCP_OFFER报文并响应。</p><p>4、DHCP客户端从DHCP_OFFER报文中提取可使用的IP地址和服务器IP地址后，会发出个广播的DHCP_REQUST报文，并在选项字段中加入选中的DHCP服务器的IP地址和自己要的IP地址。</p><p>5、DHCP服务器收到DHCP_REQUST报文后，判断选项字段中的IP地址是否与自己的地址相同。如果不相同，DHCP服务器不做任何处理，然后清除相应IP地址分配记录；如果相同，DHCP服务器就会向客户端发送一个DHCP_ACK报文，并在报文选项字段中增加IP地址的使用租期信息。</p><p>6、DHCP客户端接收到DHCP_ACK报文后，会检查服务器分配的IP地址是否能够使用（发送一个ARP请求到网络中，如果无主机回应该请求，则表示该地址可用）。如果可以使用，则客户端成功获得IP地址会根据IP地址使用租期自动启动续延过程；如果DHCP客户端发现分配的IP地址已经被使用，则需要向DHCP服务器发出一个DHCP_DECLINE报文，通知DHCP服务器禁用这个IP地址，此后，DHCP客户端重新开始上述地址申请流程。</p><p>7、客户端在使用租期超过50%或87.5%时，会以广播播形式向DHCP服务器发送DHCP_REQUST报文来续租IP地址。如果DHCP客户端成功收到服务器返回的DHCP_ACK报文，则按相应时间延长IP地址租期；如果没有收到服务器返回的的DHCP_ACK报文，则DHCP 客户端继续使用这个IP地址，直到IP地址使用租期到期。当租期到期后，DHCP客户端会向DHCP服务器发送一个DHCP_RELEASE报文来释放这个IP地址，并开始新的IP地址申请过程。</p><p>8、最后需要指出的是，DHCP服务器发送的DHCP_OFFER报文中的IP地址不一定是最后分配给客户端的IP地址，通常情况下，DHCP服务器会保留该地址直到客户端发出DHCP_REQUEST请求。在整个协商过程中，如果DHCP客户端发送的DHCP_REQUEST报文中的地址信息不正确，如客户端已经迁移到新的子网或者租约已经过期，DHCP服务器会发送DHCP_NAK报文给DHCP客户端，让客户端重新发起地址申请过程。</p><h4 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h4><p>DHCP配置：</p><p>R1(config)#ip dhcp pool ccna(dhcp服务器名称）</p><p>R1(dhcp-config)#network 172.16.1.0 255.255.255.0</p><p>R1(dhcp-config)#default-router 172.16.1.1</p><p>R1(dhcp-config)#dns-server 8.8.8.8</p><p>排除地址：</p><p>排除单个地址</p><p>R1(config)#ip dhcp excluded-address 172.16.1.254</p><p>排除一段地址</p><p>R1(config)#ip dhcp excluded-address 172.16.1.100 172.16.1.200</p><p>​                               起始地址   结束地址</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DHCP 全称Dynamic Host configuration protocol， 动态主机配置协议。 它可以为客户机自动分配IP地址、子网掩码以及缺省网关、DNS服务器的IP地址等TCP/IP参数，&lt;/p&gt;
    
    </summary>
    
      <category term="CCNA" scheme="http://soliym.top/categories/CCNA/"/>
    
    
      <category term="DHCP" scheme="http://soliym.top/tags/DHCP/"/>
    
  </entry>
  
  <entry>
    <title>RHCSA-Linux基础命令（一）</title>
    <link href="http://soliym.top/2019/06/17/RHCSA-Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://soliym.top/2019/06/17/RHCSA-Linux基础命令（一）/</id>
    <published>2019-06-17T11:21:08.791Z</published>
    <updated>2019-09-02T04:17:01.720Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux的基本原则"><a href="#Linux的基本原则" class="headerlink" title=">Linux的基本原则"></a>>Linux的基本原则</h4><p>1、由目的单一的小程序组成      </p><p>2、一切皆文件，设备的访问入口也是文件</p><p>3、避免捕获用户接口，尽量不和用户交互</p><p>4、配置文件保存在纯文本格式，只要有一个文本编辑器，足以搞定所有的配置。</p><a id="more"></a><h5 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h5><p>>命令  </p><p>>命令  参数   </p><p>>命令   -选项       </p><p>>命令   -选项    参数   </p><h5 id="修改命令的执行特性"><a href="#修改命令的执行特性" class="headerlink" title="修改命令的执行特性"></a>修改命令的执行特性</h5><p>短选项        -l</p><p>多个选项可以组合</p><p>长格式        –long</p><p>​          参数        指定命令的作用对象</p><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a><strong>基础命令</strong></h4><p><strong>重启：reboot</strong></p><p><strong>关机：shutdown -h now，poweroff</strong></p><p><strong>ip a</strong>  <strong>/ ifconfig</strong>   查看ip地址</p><p><strong>dhclient</strong>  地址请求，打开网络模式</p><p><strong>kill -9 ID</strong>  结束相应的进程（命令   -选项    参数）</p><p><strong>pwd</strong>  指出当前工作环境    print workdoing directory </p><p><strong>su</strong>       切换到root用户并不切换环境（工作目录） switch user </p><p><strong>su - root</strong>    切换到root用户并切换环境(切换了工作目录)</p><p><strong>cd</strong>        切换目录  change directroy</p><p>​        绝对路径        从根开始到目标的路径叫绝对路径</p><p>​        相对路径        相对当前目录开始到目标路径  </p><p>​        /   根</p><p>​        ~   家目录 /root /home/redhat  </p><p>​        ~ USERNAME(root用户有权限)        直接切换到指定用户的家目录</p><p>​        -        在上一个目录和当前目录来回切换</p><p>​        .   当前目录</p><p>​        ..  上一级目录</p><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a><strong>passwd</strong></h4><ol><li>修改密码：<strong>passwd</strong> <strong>用户名</strong>    直接输入passwd修改当前用户的密码</li><li><p>删除密码：<strong>passwd -d</strong> <strong>用户名</strong></p></li><li><p>root用户：不需要输入原密码，可以不符合密码复杂性规则，可以给任何人修改密码</p></li><li><p>普通用户：需要输入原密码，必须符合密码复杂性规则，passwd修改密码无法指定用户 </p></li><li><p>[student@localhost ~]$ <strong>su -c passwd</strong>普通用户给root用户修改密码</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Linux的基本原则&quot;&gt;&lt;a href=&quot;#Linux的基本原则&quot; class=&quot;headerlink&quot; title=&quot;&gt;Linux的基本原则&quot;&gt;&lt;/a&gt;&gt;Linux的基本原则&lt;/h4&gt;&lt;p&gt;1、由目的单一的小程序组成      &lt;/p&gt;
&lt;p&gt;2、一切皆文件，设备的访问入口也是文件&lt;/p&gt;
&lt;p&gt;3、避免捕获用户接口，尽量不和用户交互&lt;/p&gt;
&lt;p&gt;4、配置文件保存在纯文本格式，只要有一个文本编辑器，足以搞定所有的配置。&lt;/p&gt;
    
    </summary>
    
      <category term="RHCSA" scheme="http://soliym.top/categories/RHCSA/"/>
    
    
      <category term="Linux命令" scheme="http://soliym.top/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>RHCSA-Linux简介</title>
    <link href="http://soliym.top/2019/06/17/RHCSA-Linux%E7%AE%80%E4%BB%8B/"/>
    <id>http://soliym.top/2019/06/17/RHCSA-Linux简介/</id>
    <published>2019-06-17T11:17:36.958Z</published>
    <updated>2019-09-02T04:16:45.576Z</updated>
    
    <content type="html"><![CDATA[<h5 id="操作系统是什么？"><a href="#操作系统是什么？" class="headerlink" title="操作系统是什么？"></a>操作系统是什么？</h5><p>操作系统（Operating System，简称OS）是管理和控制计算机硬件与软件资源的计算机程序，是配置在计算机硬件上的第一层软件，任何其它软件都必须在操作系统的支持下才能运行。</p><p>操作系统的主要功能是为管理硬件资源和为应用程序开发人员提供良好的环境来使应用程序具有更好的兼容性，为了达到这个目的，内核提供一系列具备预定功能的多内核函数，通过一组称为系统调用的接口（应用编程接口API，由操作系统实现提供的所有系统调用所构成的集合，是应用程序和系统之间的接口）呈现给用户。系统调用把应用程序的请求传给内核，调用相应的内核函数完成所需的处理，将处理的结果返回给应用程序。</p><a id="more"></a><p>>&gt;硬件：框架</p><h5 id="冯诺依曼体系结构："><a href="#冯诺依曼体系结构：" class="headerlink" title="冯诺依曼体系结构："></a>冯诺依曼体系结构：</h5><p>1946年美籍凶牙利科学家冯诺依曼提出存储程序原理，把程序本身当做数据来对待，程序和该程序处理数据用同样的方式存储，并确定了存储程序计算机的五大组成部分和基本工作方法。</p><p>特点：</p><p>（1）计算机处理数据和指令一律用二进制数表示</p><p>（2）顺序执行程序</p><p>计算机运行过程中，把要执行的程序和处理的数据首先存入主存储器（内存），计算机执行程序时，将自动地并按顺序 从主存储器中取出指令一条一条的执行，这一概念称为顺序执行程序。</p><p>（3）计算机硬件由运算器、控制器、存储器、输入设备、输出设备五大部分组成。</p><p><img src="file:///C:/Users/ASUS/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image001.jpg" alt="img"></p><p>memory：编址存储设备</p><p>假设我们的存储器为一个长条，其中每八位（bit）作为一个单元，我们把它称为字节byte，字节又称为cell。</p><p>机器语言：二进制指令 （但是对于编程 人员来说二进制语言太难懂（太简陋，太底层），但是程序员想用简单点的语言去描述计算机又不懂所以两者之间不能耦合可以加一个中间层–编译器）</p><p>   汇编语言： 仅是将二进制转为人类语言想接近的语言或者是与人类语言符号相同的类型（+ and/plus）</p><p>   所以任何一款芯片制造商他们都把机器的代码也就是机器语言提供一个较为简单的稍微向上一点的但任然很简陋的编程接口叫做汇编语言（微码编程语言）</p><h5 id="软件："><a href="#软件：" class="headerlink" title="软件："></a>软件：</h5><p>​     —-汇编语言： （低级语言）   </p><p>​            应用：驱动程序</p><p>汇编语言（assembly language）是一种用于<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA/191373" target="_blank" rel="noopener">电子计算机</a>、<a href="https://baike.baidu.com/item/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/104320" target="_blank" rel="noopener">微处理器</a>、<a href="https://baike.baidu.com/item/%E5%BE%AE%E6%8E%A7%E5%88%B6%E5%99%A8/6688343" target="_blank" rel="noopener">微控制器</a>或其他可编程器件的低级语言，亦称为符号语言。在汇编语言中，用<a href="https://baike.baidu.com/item/%E5%8A%A9%E8%AE%B0%E7%AC%A6/489287" target="_blank" rel="noopener">助记符</a>（Mnemonics）代替<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4/8553126" target="_blank" rel="noopener">机器指令</a>的<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%A0%81/3220418" target="_blank" rel="noopener">操作码</a>，用地址符号（Symbol）或标号（Label）代替指令或<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E6%95%B0/7658270" target="_blank" rel="noopener">操作数</a>的地址。在不同的设备中，汇编语言对应着不同的机器语言<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E9%9B%86/238130" target="_blank" rel="noopener">指令集</a>，通过汇编过程转换成机器指令。普遍地说，特定的汇编语言和特定的机器语言指令集是一一对应的,不同平台之间不可直接移植。</p><p>​    eg：操作：寄存器BX的内容送到AX中</p><p>​     1000100111011000              机器指令</p><p>​      mov ax,bx                    汇编指令</p><p>（注意：最终识别的还是01二进制数所以还需要将汇编语言转换为二进语言所以需要用到汇编器）</p><p>​      —-(高级语言)：比较接近人类的思维逻辑    —-(编译器)    </p><p>​               系统级：  c    c++  </p><p>​                     适用场合大型的对性能要求比较高的服务类程序   如：oracle  mysql linux windows /</p><p>​               应用级：java  python  ruby         </p><h5 id="系统调用的层级关系-系统组成结构"><a href="#系统调用的层级关系-系统组成结构" class="headerlink" title="系统调用的层级关系(系统组成结构)"></a><strong>系统调用的层级关系(系统组成结构</strong>)</h5><p><img src="file:///C:/Users/ASUS/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image002.jpg" alt="应 用 程 序  用 户 宁 间  庄 》 ib r 地  系 铳 啁 用  内 核 窄 间  安 全 功 能  进 程 管 理  文 件 管 理  0 百 理  网 络 管 理  内 存 一 百 理  件 抽 层 "></p><h5 id="操作系统内核的功能："><a href="#操作系统内核的功能：" class="headerlink" title="操作系统内核的功能："></a>操作系统内核的功能：</h5><p>系统调用接口</p><p>程序管理</p><p>内存管理，虚拟内存—内存交换    </p><p>文件系统管理    </p><p>设备驱动</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;操作系统是什么？&quot;&gt;&lt;a href=&quot;#操作系统是什么？&quot; class=&quot;headerlink&quot; title=&quot;操作系统是什么？&quot;&gt;&lt;/a&gt;操作系统是什么？&lt;/h5&gt;&lt;p&gt;操作系统（Operating System，简称OS）是管理和控制计算机硬件与软件资源的计算机程序，是配置在计算机硬件上的第一层软件，任何其它软件都必须在操作系统的支持下才能运行。&lt;/p&gt;
&lt;p&gt;操作系统的主要功能是为管理硬件资源和为应用程序开发人员提供良好的环境来使应用程序具有更好的兼容性，为了达到这个目的，内核提供一系列具备预定功能的多内核函数，通过一组称为系统调用的接口（应用编程接口API，由操作系统实现提供的所有系统调用所构成的集合，是应用程序和系统之间的接口）呈现给用户。系统调用把应用程序的请求传给内核，调用相应的内核函数完成所需的处理，将处理的结果返回给应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="RHCSA" scheme="http://soliym.top/categories/RHCSA/"/>
    
    
      <category term="Linux" scheme="http://soliym.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法（1）</title>
    <link href="http://soliym.top/2019/05/16/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89/"/>
    <id>http://soliym.top/2019/05/16/常见排序算法（1）/</id>
    <published>2019-05-16T15:40:24.468Z</published>
    <updated>2019-09-02T04:16:25.207Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法是算法中最重要、最基础的算法，也是编程中用到最多的算法。不论是竞赛还是面试时，排序算法都是最常见的考点，下面根据排序思想不同，给出常见的几种排序算法。</p><a id="more"></a><h4 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h4><p>基本思想：在一个已排好序的基础上，每一步将下个待排序的记录有序插入到已排好的记录子集中，直到所有的待排序记录全部插入到序列中。</p><h5 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h5><p>算法思想：将第i个数据插到前面i-1个以排好的数据中。</p><p>例如：48 62 35 77 55 14 35* 98</p><p>a  ｛48｝ 62 35 77 55 14 35* 98</p><p>b  ｛48 62｝ 35 77 55 14 35* 98</p><p>c    ｛35 48 62｝77 55 14 35* 98</p><p>。。。。。。。。。。。。。。。</p><p>算法过程：保留第i个数据，将第i个数据依次和前面i-1个数据比较，如果大于其中某一个数据，则停止，将第I个数据插入到此数据后一位，在每次比较中，较大的数据向后移动一位（排序为从小到大）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void InsSort(int r[],int length)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=2;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r[0]=r[j];//采用首地址保存第i个元素,并且防止数组越界</span><br><span class="line">        int j=i-1;</span><br><span class="line">        while(r[0]&lt;r[j])&#123;</span><br><span class="line">            r[j+1]=r[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        r[j+1]=r[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接插入排序的时间复杂度为T(n)=O(n^2),空间复杂度，空间复杂度为S（n）=O(1);</p><p>直接插入排序是稳定的排序方法。当有两个相同元素时，他们的相对位置不发生改变。</p><h5 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h5><p>算法思想：在直接插入的思想中加入折半查找的思想，提高查找效率。</p><p>基本的排序方法不变，只是在查找的过程中做出改变，前面的查找为顺序查找，从第i-1个元素按顺序查找到第1个元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void BinSort（int r[],int length）</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=2;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int r[0]=r[i];</span><br><span class="line">        int low=1,high=i-1;</span><br><span class="line">        while(low&lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid=(low+high)/2;</span><br><span class="line">            if(r[0]&lt;r[mid]) high=mid-1;</span><br><span class="line">            else low=mid+1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=i-1;j&gt;=low;j--)</span><br><span class="line">          r[j+1]=r[j];</span><br><span class="line">        r[low]=r[0];  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>折半插入排序是由直接插入排序改良而来，在原有的基础上加入折半查找，折半查找是一种非常重要的计算机思维，在很多地方都有应用。</p><p>虽然折半插入是由直接插入改进而来，但是时间复杂度并没用改变多少，仍然为0（n^2）;</p><h5 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h5><p>在插入排序中，希尔排序是最佳的排序算法，也是比较难理解的算法。</p><p>例：</p><p> 初始             46  55  13   42  94  17  05  70 </p><p>d=4               <strong><em>46</em></strong>  17  05   42  <strong><em>94</em></strong>   55 13  70</p><p>d=2               05  17  13   42  46   55  94 70 </p><p>d=1               05  13   17  42  46   55  70 94 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void   shellInSort(int r[],int length,int delta)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=1+delta;i&lt;=length,i++)//delta为增量d</span><br><span class="line">    &#123;</span><br><span class="line">        if(r[i]&lt;r[i-delta])//子序列最后一个元素和第一个元素比较</span><br><span class="line">        ｛</span><br><span class="line">        r[0]=r[i];</span><br><span class="line">        for(int j=i-delta;j&gt;0&amp;&amp;r[0]&lt;r[j];j-=delta)</span><br><span class="line">           r[j+delta]=r[j];</span><br><span class="line">          r[j+delta]=r[0];</span><br><span class="line">        ｝</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void shellSort(int r[],int length,int delta[],int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0;i&lt;=n-1;i++)</span><br><span class="line">      shellInSort(r,length,delta[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于增量d的选取：</p><p>shell  ： d=n/2;d=d/2……..d=1;</p><p>knuth:    d=d/3+1;</p><p>时间复杂度：O（n^1.5）;</p><p>注意：希尔排序是一种不稳定的排序；</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><table><thead><tr><th>排序算法</th><th>时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>直接插入</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>折半插入</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n^1.5)</td><td>O(1)</td><td>不稳定</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序算法是算法中最重要、最基础的算法，也是编程中用到最多的算法。不论是竞赛还是面试时，排序算法都是最常见的考点，下面根据排序思想不同，给出常见的几种排序算法。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="插入排序" scheme="http://soliym.top/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>c关于堆栈的划定</title>
    <link href="http://soliym.top/2019/05/14/c%E5%85%B3%E4%BA%8E%E5%A0%86%E6%A0%88%E7%9A%84%E5%88%92%E5%AE%9A/"/>
    <id>http://soliym.top/2019/05/14/c关于堆栈的划定/</id>
    <published>2019-05-14T13:41:59.467Z</published>
    <updated>2019-05-14T13:51:36.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="c语言-全局变量与局部变量的划分"><a href="#c语言-全局变量与局部变量的划分" class="headerlink" title="c语言 全局变量与局部变量的划分"></a>c语言 全局变量与局部变量的划分</h4><p>在做背包问题的时候遇到这样的问题，定义一个二维数组变量，该变量的大小为1000*1000，但是在运行时报错，显示“Stack overflow ”，说明在此处超过了栈的空间。</p><a id="more"></a><p><img src="/2019/05/14/c关于堆栈的划定/D:/网站文件\personalblog\hexo\source\_posts\c关于堆栈的划定\溢出.png" alt=""></p><h5 id="c-c-内存分配"><a href="#c-c-内存分配" class="headerlink" title="c/c++内存分配"></a>c/c++内存分配</h5><h6 id="栈区-stack-sagment"><a href="#栈区-stack-sagment" class="headerlink" title="栈区(stack sagment)"></a>栈区(stack sagment)</h6><p>由编译器自动分配释放，存放函数的参数的值，局部变量的值等。在Windows下，栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在Windows下，栈的大小是2M(也有的是1M，总之是一个编译时就确定的常数)，如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。</p><h6 id="堆区-heap-sagment"><a href="#堆区-heap-sagment" class="headerlink" title="堆区(heap sagment)"></a>堆区(heap sagment)</h6><p> 一般由程序员分配释放，若程序员不释放，程序结束时可能由系统回收 。它与数据结构中的堆是两回事。堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p><h6 id="全局区-静态区-data-sagment"><a href="#全局区-静态区-data-sagment" class="headerlink" title="全局区(静态区)(data sagment)"></a>全局区(静态区)(data sagment)</h6><p>全局变量和静态变量的存储区域是在一起的，程序结束后由系统释放。数据区的大小由系统限定，一般很大。</p><p>因为栈区的大小是编译器分配好的，如果变量的空间过大就会有栈的溢出问题，因此变量的类型是局部变量还是全局变量要根据变量大小选择，一版来说只有用到数组要考虑溢出问题，比如long、double都是固定长度大小的。如果数组的大小大于1000*1000就要考虑溢出问题，而全局变量的大小是有系统规定的，一般都很大。全局变量大小可达G以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;c语言-全局变量与局部变量的划分&quot;&gt;&lt;a href=&quot;#c语言-全局变量与局部变量的划分&quot; class=&quot;headerlink&quot; title=&quot;c语言 全局变量与局部变量的划分&quot;&gt;&lt;/a&gt;c语言 全局变量与局部变量的划分&lt;/h4&gt;&lt;p&gt;在做背包问题的时候遇到这样的问题，定义一个二维数组变量，该变量的大小为1000*1000，但是在运行时报错，显示“Stack overflow ”，说明在此处超过了栈的空间。&lt;/p&gt;
    
    </summary>
    
      <category term="c语言" scheme="http://soliym.top/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="堆栈" scheme="http://soliym.top/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>open vswitch</title>
    <link href="http://soliym.top/2019/04/19/open-vswitch/"/>
    <id>http://soliym.top/2019/04/19/open-vswitch/</id>
    <published>2019-04-19T04:56:10.561Z</published>
    <updated>2019-04-19T04:59:30.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="open-vswitch实验"><a href="#open-vswitch实验" class="headerlink" title="open vswitch实验"></a>open vswitch实验</h3><p>在Terminal下对ovs交换机进行测试；</p><p>对ovs交换机和端口的创建；对端口号的修改，配置完ovs以后查看交换机的状态，以及两个端口号的测试。</p><a id="more"></a><h4 id="ovs各模块"><a href="#ovs各模块" class="headerlink" title="ovs各模块"></a>ovs各模块</h4><table><thead><tr><th>ovs-vswitched</th><th>主要模块</th></tr></thead><tbody><tr><td>ovsdb-server</td><td>轻量级数据库服务器</td></tr><tr><td>ovs-dpctl</td><td>配置switch内核</td></tr><tr><td>ovs-vsctl</td><td>c查询和更新交换机配置</td></tr><tr><td>ovs-appctl</td><td>f发送命令消息</td></tr></tbody></table><h4 id="ovs常用操作"><a href="#ovs常用操作" class="headerlink" title="ovs常用操作"></a>ovs常用操作</h4><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>添加网桥</td><td>ovs-vsctl add-br 交换机名</td></tr><tr><td>删除网桥</td><td>ovs-vsctl del-br 交换机名</td></tr><tr><td>添加端口</td><td>ovs-vsctl add-port 交换机名  端口号</td></tr><tr><td>删除端口</td><td>ovs-vsctl del-port 交换机名  端口号</td></tr><tr><td>连接控制器</td><td>ovs-vsctl set-controller 交换机名 tcp:ip 地址：端口号</td></tr><tr><td>断开控制器</td><td>ovs-vsctl del-controller 交换机名</td></tr><tr><td>列出所有网桥（交换机）</td><td>ovs-vsctl list-br</td></tr><tr><td>列出网桥中的所有端口</td><td>ovs-vsctl list-port 交换机名</td></tr><tr><td>列出所有连接到网卡的网桥</td><td>ovs-vsctl port-to-br 端口号</td></tr><tr><td>查看ovs网络状态</td><td>ovs-vsctl show</td></tr><tr><td>查看ovs端口信息</td><td>ovs-vsctl show 交换机名</td></tr><tr><td>修改端口号</td><td>ovs-vsctl set Interface 端口名 ofport_request=新端口号</td></tr></tbody></table><p>以上为ovs经常用到的操作，也是最基础的操作。下面开始ovs的测试实验。</p><h4 id="open-vswitch"><a href="#open-vswitch" class="headerlink" title="open vswitch"></a>open vswitch</h4><h5 id="ovs交换机创建"><a href="#ovs交换机创建" class="headerlink" title="ovs交换机创建"></a>ovs交换机创建</h5><p>创建一个名为ovs-switch的交换机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl add-br ovs-switch</span><br></pre></td></tr></table></figure><h5 id="端口的配置"><a href="#端口的配置" class="headerlink" title="端口的配置"></a>端口的配置</h5><p>配置一个端口号，名为p0,并设置网络接口为;intrenal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl set Interface p0 type=internal</span><br></pre></td></tr></table></figure><p>设置端口号，如果不自己设置，端口号由系统随机设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl set Interface 端口名 ofport_request=新端口号</span><br></pre></td></tr></table></figure><h5 id="虚拟网络空间配置"><a href="#虚拟网络空间配置" class="headerlink" title="虚拟网络空间配置"></a>虚拟网络空间配置</h5><p>避免与本地网络地址发生冲突，需要创建一个虚拟网络空间，将接口放入当中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns add ns0</span><br><span class="line">sudo ip link set p0 netns ns0</span><br><span class="line">sudo ip netns exec ip addr add 192.168.1.100/24dev p0</span><br><span class="line">sudoip netns ecev ns0 ifconfig p0 promisc up</span><br></pre></td></tr></table></figure><p>创建一个名为ns0的虚拟网络空间，并将端口p0放入其中，给端口p0配置ip 192.168..1.100</p><h5 id="查看ovs交换机"><a href="#查看ovs交换机" class="headerlink" title="查看ovs交换机"></a>查看ovs交换机</h5><p>查看ovs交换机的各个接口属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl show</span><br></pre></td></tr></table></figure><h5 id="测试端口"><a href="#测试端口" class="headerlink" title="测试端口"></a>测试端口</h5><p>两个端口之间相互测试，需要创建两个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns exec ns0 ping 192.168.1.101</span><br></pre></td></tr></table></figure><p>192.168.1.101为第二个端口的ip</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;open-vswitch实验&quot;&gt;&lt;a href=&quot;#open-vswitch实验&quot; class=&quot;headerlink&quot; title=&quot;open vswitch实验&quot;&gt;&lt;/a&gt;open vswitch实验&lt;/h3&gt;&lt;p&gt;在Terminal下对ovs交换机进行测试；&lt;/p&gt;
&lt;p&gt;对ovs交换机和端口的创建；对端口号的修改，配置完ovs以后查看交换机的状态，以及两个端口号的测试。&lt;/p&gt;
    
    </summary>
    
      <category term="SDN" scheme="http://soliym.top/categories/SDN/"/>
    
    
      <category term="vswitch" scheme="http://soliym.top/tags/vswitch/"/>
    
  </entry>
  
  <entry>
    <title>2n皇后</title>
    <link href="http://soliym.top/2019/04/11/2n%E7%9A%87%E5%90%8E/"/>
    <id>http://soliym.top/2019/04/11/2n皇后/</id>
    <published>2019-04-11T12:37:08.115Z</published>
    <updated>2019-04-11T12:39:37.505Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</p><a id="more"></a><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>　　输入的第一行为一个整数n，表示棋盘的大小。<br>　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>　　输出一个整数，表示总共有多少种放法。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>4<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1</p><p>样例输出</p><p>2</p><p>样例输入</p><p>4<br>1 0 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1</p><p>样例输出</p><p>0</p><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>2n皇后问题是在n皇后的问题上扩展而来，涉及搜索、模拟、n皇后问题，要解决2n皇后问题先要解决n皇后问题，n皇后在前面已经写了，现在来解决2n皇后的问题。</p><p>2n皇后实际是在在棋盘上先放一种皇后，然后再放另一种皇后，已经放过皇后的位置就不能再放皇后，所以首先记录白皇后的位置，然后再放黑皇后，需要一个二维数组来模拟棋盘，初始时，这个棋盘上是0或1，0表示不可以放皇后，1表示可以放皇后的，在开始放白皇后的时候，如果白皇后可以在棋盘上放置，那么记录该位置，将该位置标记为2，代表放置的是白皇后，当所有的白皇后放置完以后，计数器现在为n代表白皇后放置完，然后放置黑皇后，放置黑皇后时，如果放置位置是2那么，则代表位置是白皇后，那么该位置不能再放置黑皇后。按照放置白皇后的方法放置黑皇后。放置方法仍然采用回溯法。</p><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><h5 id="放置位置检查是否合适"><a href="#放置位置检查是否合适" class="headerlink" title="放置位置检查是否合适"></a>放置位置检查是否合适</h5><h6 id="一种皇后算法"><a href="#一种皇后算法" class="headerlink" title="一种皇后算法"></a>一种皇后算法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//皇后的放置位置是否合适</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//x为行，y为列</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y==a[i]||<span class="built_in">abs</span>(x-i)==<span class="built_in">abs</span>(y-a[i]))</span><br><span class="line"><span class="comment">//判断是否在同一列或同斜行</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="两种皇后算法"><a href="#两种皇后算法" class="headerlink" title="两种皇后算法"></a>两种皇后算法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x, int y,int s)//x为行，y为列</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">for (i = 0; i &lt; x; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (y == (s==2?a[i]:c[i]) || abs(x - i) == abs(y - (s == 2 ? a[i] : c[i])))</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在放置一种的基础上添加标志，当s==2时表示放置白皇后，所用到的是a数组，当s==3时，表示放置黑皇后，所用到的是c数组。a数组用来记录白皇后在各行的位置。c数组表示黑皇后在各行的位置。</p><h5 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h5><h6 id="一种皇后回溯"><a href="#一种皇后回溯" class="headerlink" title="一种皇后回溯"></a>一种皇后回溯</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void king(int k)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if(k==n)//如果n皇后符合位置，合法方案加一</span><br><span class="line">&#123;</span><br><span class="line">count++;//合法方案计数</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(check(k,i))/*判断是否能放皇后，如果可以则记录皇后的所在的列，然后递归到下一行，如果不满足则回溯至上一行*/</span><br><span class="line">&#123;</span><br><span class="line">a[k]=i;</span><br><span class="line">king(k+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="两种皇后回溯"><a href="#两种皇后回溯" class="headerlink" title="两种皇后回溯"></a>两种皇后回溯</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void king(int k,int s)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if (k == n)</span><br><span class="line">&#123;</span><br><span class="line">if (s==2)king(0, 3);//s==3时放置黑皇后</span><br><span class="line">else count++;//如果白皇后和黑皇后都等于n则计数器加一</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for (i = 0; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (b[k][i] != 2 &amp;&amp; b[k][i] != 0 &amp;&amp; check(k, i,s))//与放置一种相比，增加两种条件，所放位置上不能等0或不能等2</span><br><span class="line">&#123;</span><br><span class="line">s==2?a[k] = i:c[k] = i;</span><br><span class="line">b[k][i] = s;//记录白皇后、黑皇后的位置</span><br><span class="line">king(k + 1,s);//第一行放置完，开始第二行</span><br><span class="line">b[k][i] = 1;//还原棋盘</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>编译器vs2017</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y == (s==<span class="number">2</span>?a[i]:c[i]) || <span class="built_in">abs</span>(x - i) == <span class="built_in">abs</span>(y - (s == <span class="number">2</span> ? a[i] : c[i])))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">king</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (k == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s==<span class="number">2</span>)king(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">else</span> count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[k][i] != <span class="number">2</span> &amp;&amp; b[k][i] != <span class="number">0</span> &amp;&amp; check(k, i,s))</span><br><span class="line">&#123;</span><br><span class="line">s==<span class="number">2</span>?a[k] = i:c[k] = i;</span><br><span class="line">b[k][i] = s;</span><br><span class="line">king(k + <span class="number">1</span>,s);</span><br><span class="line">b[k][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">    scanf_s(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;b[i][j]);</span><br><span class="line">king(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;h5 id=&quot;问题描述-1&quot;&gt;&lt;a href=&quot;#问题描述-1&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="http://soliym.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>n皇后</title>
    <link href="http://soliym.top/2019/04/06/n%E7%9A%87%E5%90%8E/"/>
    <id>http://soliym.top/2019/04/06/n皇后/</id>
    <published>2019-04-06T10:10:57.536Z</published>
    <updated>2019-04-06T14:34:57.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>​        n皇后问题是指在一个n*n的国际象棋棋盘上放置n个皇后，使得这n个皇后两均不在同一行、同一列、同一条线上，求合法的方案数。</p><a id="more"></a><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>​       如果采用枚举法判断每一种情况，需要枚举n^2的组合数，如果n=8;南无需要枚举54502232次，如果n再增大，需要枚举的次数就太过庞大。所以采用回溯法，尽量减少不必要的循环，当问题达到边界时，返回上一层，不必再浪费资源。如果只考虑每一行放置一个皇后、每一列也只放置一个皇后。从第一行开始放置皇后，当第一行的皇后确定后，结束循环，开始从下一行开始放置皇后，且放置皇后的位置不能与前面的皇后在同一列或同一条对角线。需要一个判断函数，判定在该位置能否放置皇后。如果一行的所有位置都不能放置皇后，那么回溯至上一行。</p><h5 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h5><p>按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的。</p><h4 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h4><h5 id="皇后位置比较算法"><a href="#皇后位置比较算法" class="headerlink" title="皇后位置比较算法"></a>皇后位置比较算法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x,int y)//皇后的放置位置是否合适</span><br><span class="line">&#123;//x为行，y为列</span><br><span class="line">int i;</span><br><span class="line">for(i=0;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(y==a[i]||abs(x-i)==abs(y-a[i]))</span><br><span class="line">//判断是否在同一列或同斜行</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>每一行放一个皇后，就解决了不在同行的问题。 </p></li><li><p>在第i行的时候，遍历n列，试探位置。和之前所有行放的位置进行比较。 </p></li><li>比较列：当前列col 不等于 之前 所有列。 即col != arr[i]。</li><li>比较斜线， 因为不再同一斜率为1或者-1的斜线。(row - i) / (col - arr[i]) != 1 或 -1 可以取巧用绝对值函数: abs(row-i) != abs(col-arr[i])。<h5 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void king(int k)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if(k==n)//如果n皇后符合位置，合法方案加一</span><br><span class="line">&#123;</span><br><span class="line">count++;//合法方案计数</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(check(k,i))/*判断是否能放皇后，如果可以则记录皇后的所在的列，然后递归到下一行，如果不满足则回溯至上一行*/</span><br><span class="line">&#123;</span><br><span class="line">a[k]=i;</span><br><span class="line">king(k+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  回溯每行放置一个皇后，记录每个皇后所在的列数，如果递归后的结果不符合，则回退至该位置，从该位置继续遍历。回溯的条件有两种，一种是在一行中没有找到适合放置皇后的位置，另一种是符合放置方案，然后回溯，寻找下一个方案。</p><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y==a[i]||<span class="built_in">abs</span>(x-i)==<span class="built_in">abs</span>(y-a[i]))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">king</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(k==n)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check(k,i))</span><br><span class="line">&#123;</span><br><span class="line">a[k]=i;</span><br><span class="line">king(k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">king(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;​        n皇后问题是指在一个n*n的国际象棋棋盘上放置n个皇后，使得这n个皇后两均不在同一行、同一列、同一条线上，求合法的方案数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="http://soliym.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://soliym.top/2019/03/30/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://soliym.top/2019/03/30/贪心算法/</id>
    <published>2019-03-30T06:59:22.507Z</published>
    <updated>2019-03-30T07:03:58.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="贪心算法概述："><a href="#贪心算法概述：" class="headerlink" title="贪心算法概述："></a>贪心算法概述：</h3><p>贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。</p><p>注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。</p><a id="more"></a><h4 id="完美的代价"><a href="#完美的代价" class="headerlink" title="完美的代价"></a>完美的代价</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>　　回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>　　交换的定义是：交换两个相邻的字符<br>　　例如mamad<br>　　第一次交换 ad : mamda<br>　　第二次交换 md : madma<br>　　第三次交换 ma : madam (回文！完美！)</p><p>输入格式</p><p>　　第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)<br>　　第二行是一个字符串，长度为N.只包含小写字母</p><p>输出格式</p><p>　　如果可能，输出最少的交换次数。<br>　　否则输出Impossible</p><p>样例输入</p><p>5<br>mamad</p><p>样例输出</p><p>3</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>​       在输入的字符串中不匹配的字母可能是一个或零，所以可以先找出这个字母，创建一个包含26个空间是数组，分别表示字符串中字母的个数，然后遍历这个数组，如果字母的个数为奇数，则表示该字母为不匹配字母。首先从首字母开始，找到与它匹配的字符，再将它与最后一个字母交换，这样一对匹配的字母就交换完了，如果遇到不匹配的字母，则将它与中间的字母交换，然后在开始遍历。但是问题要求的是相邻的交换，所以这种方法不符合要求。</p><p>​        我们需要相邻交换，所以要找到交换的起点和终点。求解方法和上面类似，先从首字母开始，在从与字符串的另一方向开始，遍历找到与首字母匹配的字母，记录它的位置，从该位置起，将后一个字母向前一个位置移动，直到与最后，记录交换次数，再将首字母元素赋值给最后一个元素，这样一趟交换完成。</p><p>全局循环次数：1 to n/2;      </p><p>每次循环需判断是否为不匹配元素</p><p>匹配元素循环次数：n-i-1 to j(当字母为匹配字母时)</p><p>匹配元素移动次数：j to n-i-1</p><p>不匹配元素循环次数：i to j(当字母为匹配字母时)</p><p>不匹配元素移动次数：j to i</p><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//交换次数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hunwen</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">int</span> y,<span class="keyword">char</span> *z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;y/<span class="number">2</span>;i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(z[i]!=x)&#123;<span class="comment">//匹配字母情况 </span></span><br><span class="line"> j=y-i<span class="number">-1</span>;</span><br><span class="line"> <span class="keyword">while</span>(j!=i&amp;&amp;(z[j]!=z[i]))j--;</span><br><span class="line"> <span class="keyword">for</span>(k=j;k&lt;y-i<span class="number">-1</span>;k++)</span><br><span class="line">   &#123; z[k]=z[k+<span class="number">1</span>];</span><br><span class="line">        count++;</span><br><span class="line">  &#125;</span><br><span class="line"> z[k]=z[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不匹配字母情况 </span></span><br><span class="line">    j=i;</span><br><span class="line">    <span class="keyword">while</span>(j!=y-i<span class="number">-1</span>&amp;&amp;(z[j]!=z[y-i<span class="number">-1</span>]))</span><br><span class="line">    j++;</span><br><span class="line">    <span class="keyword">for</span>(k=j;k&gt;i;k--) &#123;</span><br><span class="line">     z[k]=z[k<span class="number">-1</span>];</span><br><span class="line">     count++;  &#125;</span><br><span class="line">         z[k]=z[y-i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> w;<span class="comment">//记录不匹配字符 </span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">801</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//清除缓存 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> b[a[i]<span class="number">-97</span>]++; <span class="comment">//对字母个数计数 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(b[i]%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">  &#123; w=i+<span class="number">97</span>; j++; &#125;<span class="comment">//遍历找到不匹配字母 </span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span>(j&gt;=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"impossible"</span>);</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> hunwen(w,n,a);<span class="comment">//交换函数 </span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);&#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次循环都使字符串两边的字母匹配，达到局部最优的方案，贪心算法没有固定的算法模式，只有固定的算法思想：局部最优，从而全局最优。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;贪心算法概述：&quot;&gt;&lt;a href=&quot;#贪心算法概述：&quot; class=&quot;headerlink&quot; title=&quot;贪心算法概述：&quot;&gt;&lt;/a&gt;贪心算法概述：&lt;/h3&gt;&lt;p&gt;贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。&lt;/p&gt;
&lt;p&gt;注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="贪心" scheme="http://soliym.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>建站分享</title>
    <link href="http://soliym.top/2018/11/26/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://soliym.top/2018/11/26/关于博客的搭建/</id>
    <published>2018-11-26T14:40:01.936Z</published>
    <updated>2019-03-29T15:27:24.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github-Pages-Hexo"><a href="#Github-Pages-Hexo" class="headerlink" title="Github Pages + Hexo"></a>Github Pages + Hexo</h2><p>  我的博客是Github Pages + Hexo在github上搭建的。<br>  下面是我对搭建博客过程中的一些分享<br><a id="more"></a></p><h3 id="一、-Git、node-js"><a href="#一、-Git、node-js" class="headerlink" title="一、 Git、node.js"></a>一、 Git、node.js</h3><p>  先下载安装好<strong>Git、node.js</strong>，具体的过程参照了网上很多的帖子，很多都不是很详细，对于我这种小白来说就是一种折磨（完全看不懂，虽然学了一点前端的HTML、css、js，但这里完全用不上，到是在后面修改主题的时候到是能看明白了。。。。）这些博客里有一个挺详细的，按照他的过程，很容易就弄出来了（其实也不容易。。。。。出现好多问题，当时就很崩溃，明明按照他的步骤完成的，为啥就不通过呢，只能靠着百度一一解决了。。。<br>  <strong>这个帖子有点小错误，可能是环境和版本不同的原因吧</strong>（我搭建的时候有些地方会出错，需要自己去改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://jantc.cn/2017/04/16/%E5%BB%BA%E7%AB%99%E5%88%86%E4%BA%AB%E4%B9%8BGithub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/</span><br></pre></td></tr></table></figure><h3 id="二、Github"><a href="#二、Github" class="headerlink" title="二、Github"></a>二、Github</h3><p>  在github上申请免费的空间来搭建网页，以前西部数码上购买过一个虚拟主机，很贵，一年要几百大洋，主要是国内的主要备案很麻烦，后来就放弃了。在github上可以搭建一个简单的静态网页，虽然是静态的，但是也可以加入很多功能，比如评论、分享系统。用来写写博客或作为个人的自我接受很好用。没有繁琐的管理，搭建好以后只管写博客就好。<br>  <strong>注册GitHub的时候最好是在chrome浏览器中</strong>，因为可以翻译网页，像我这种还没过四级的渣渣，看见这些英文网站就头疼。。。。<br>  具体的注册步骤就不说了，反正我也是看着别人的帖子弄的。。。这个很容易网上就能找到（我忘了我是在按照那个弄的了）</p><h3 id="三、hexo"><a href="#三、hexo" class="headerlink" title="三、hexo"></a>三、hexo</h3><p>配置完hexo本地就算配置完成了，接下来就是将hexo托管到github。<br>  那个_config.yml有两个，<strong>一个是在hexo文件夹下的，另一个是在主题文件夹下的</strong>，一定要分清楚这两个，后面修改主题配置的时候会对这两个文件进行修改。<br>  到这基础的就弄完了，可以说有个简单的博客就搭建完了，不过这时候页面有点丑（太low而且没啥功能），接下来就是对博客的美化-主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g  </span><br><span class="line">hexo s  </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="四、主题"><a href="#四、主题" class="headerlink" title="四、主题"></a>四、主题</h3><p>我使用的是Material X作为博客的主题，想弄的话可以在我们博客的最下面点<strong>Material X</strong>连接，里面有关于这个主题的修改方法，在最下方有主题的源代码，下载后将文件放在主题文件夹中，上传就Ok了，具体的方法可以百度（有时间是话我会写篇文章来详细说一下我是怎样修改的和遇到的问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xaoxuu.com/blog/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.wushile.top/</span><br></pre></td></tr></table></figure><h2 id="关于搭建博客"><a href="#关于搭建博客" class="headerlink" title="关于搭建博客"></a>关于搭建博客</h2><p>  博客搭建花了大概四天多的时间才完成对博客的简单搭建，第一次弄博客，遇到了很多很多的问题，几乎都快要放弃了，但想想已经花费的很多的时间去做这个博客，就该把它弄完，从无到有，很庆幸坚持到了最后，从一无所知的小白到完成搭建这个博客，学到了很多知识，在网上查找解决问题的时候也见识到了很多。很久都没有这么专注的去做一件事情，每天就想着一件事，就想把这个博客建好，现在终于把基础搭建完了，不足的地方以后再去修改，千里之行始于足下。这是第一次写博客，很多格式都不动，写的很low，没办法，这会已经快一点，也没时间去学了，明天还有课。这两周可能不会对博客再进行大的修改了，还有两周考数据结构，没时间去美化了，等考完试再去博客进行修改吧    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github-Pages-Hexo&quot;&gt;&lt;a href=&quot;#Github-Pages-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Github Pages + Hexo&quot;&gt;&lt;/a&gt;Github Pages + Hexo&lt;/h2&gt;&lt;p&gt;  我的博客是Github Pages + Hexo在github上搭建的。&lt;br&gt;  下面是我对搭建博客过程中的一些分享&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://soliym.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://soliym.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://soliym.top/2018/11/25/hello-world/"/>
    <id>http://soliym.top/2018/11/25/hello-world/</id>
    <published>2018-11-25T08:55:32.795Z</published>
    <updated>2019-03-28T15:00:56.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><a id="more"></a><h3 id="first-personalblog"><a href="#first-personalblog" class="headerlink" title="first personalblog"></a>first personalblog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，世界！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://soliym.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://soliym.top/tags/hexo/"/>
    
  </entry>
  
</feed>
