<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>soliym</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://soliym.top/"/>
  <updated>2019-03-30T07:03:58.902Z</updated>
  <id>http://soliym.top/</id>
  
  <author>
    <name>soliym</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://soliym.top/2019/03/30/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://soliym.top/2019/03/30/贪心算法/</id>
    <published>2019-03-30T06:59:22.507Z</published>
    <updated>2019-03-30T07:03:58.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="贪心算法概述："><a href="#贪心算法概述：" class="headerlink" title="贪心算法概述："></a>贪心算法概述：</h3><p>贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。</p><p>注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。</p><a id="more"></a><h4 id="完美的代价"><a href="#完美的代价" class="headerlink" title="完美的代价"></a>完美的代价</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>　　回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>　　交换的定义是：交换两个相邻的字符<br>　　例如mamad<br>　　第一次交换 ad : mamda<br>　　第二次交换 md : madma<br>　　第三次交换 ma : madam (回文！完美！)</p><p>输入格式</p><p>　　第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)<br>　　第二行是一个字符串，长度为N.只包含小写字母</p><p>输出格式</p><p>　　如果可能，输出最少的交换次数。<br>　　否则输出Impossible</p><p>样例输入</p><p>5<br>mamad</p><p>样例输出</p><p>3</p><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>​       在输入的字符串中不匹配的字母可能是一个或零，所以可以先找出这个字母，创建一个包含26个空间是数组，分别表示字符串中字母的个数，然后遍历这个数组，如果字母的个数为奇数，则表示该字母为不匹配字母。首先从首字母开始，找到与它匹配的字符，再将它与最后一个字母交换，这样一对匹配的字母就交换完了，如果遇到不匹配的字母，则将它与中间的字母交换，然后在开始遍历。但是问题要求的是相邻的交换，所以这种方法不符合要求。</p><p>​        我们需要相邻交换，所以要找到交换的起点和终点。求解方法和上面类似，先从首字母开始，在从与字符串的另一方向开始，遍历找到与首字母匹配的字母，记录它的位置，从该位置起，将后一个字母向前一个位置移动，直到与最后，记录交换次数，再将首字母元素赋值给最后一个元素，这样一趟交换完成。</p><p>全局循环次数：1 to n/2;      </p><p>每次循环需判断是否为不匹配元素</p><p>匹配元素循环次数：n-i-1 to j(当字母为匹配字母时)</p><p>匹配元素移动次数：j to n-i-1</p><p>不匹配元素循环次数：i to j(当字母为匹配字母时)</p><p>不匹配元素移动次数：j to i</p><h5 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//交换次数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hunwen</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">int</span> y,<span class="keyword">char</span> *z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;y/<span class="number">2</span>;i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(z[i]!=x)&#123;<span class="comment">//匹配字母情况 </span></span><br><span class="line"> j=y-i<span class="number">-1</span>;</span><br><span class="line"> <span class="keyword">while</span>(j!=i&amp;&amp;(z[j]!=z[i]))j--;</span><br><span class="line"> <span class="keyword">for</span>(k=j;k&lt;y-i<span class="number">-1</span>;k++)</span><br><span class="line">   &#123; z[k]=z[k+<span class="number">1</span>];</span><br><span class="line">        count++;</span><br><span class="line">  &#125;</span><br><span class="line"> z[k]=z[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不匹配字母情况 </span></span><br><span class="line">    j=i;</span><br><span class="line">    <span class="keyword">while</span>(j!=y-i<span class="number">-1</span>&amp;&amp;(z[j]!=z[y-i<span class="number">-1</span>]))</span><br><span class="line">    j++;</span><br><span class="line">    <span class="keyword">for</span>(k=j;k&gt;i;k--) &#123;</span><br><span class="line">     z[k]=z[k<span class="number">-1</span>];</span><br><span class="line">     count++;  &#125;</span><br><span class="line">         z[k]=z[y-i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> w;<span class="comment">//记录不匹配字符 </span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">801</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">getchar();<span class="comment">//清除缓存 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"> b[a[i]<span class="number">-97</span>]++; <span class="comment">//对字母个数计数 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(b[i]%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">  &#123; w=i+<span class="number">97</span>; j++; &#125;<span class="comment">//遍历找到不匹配字母 </span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span>(j&gt;=<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"impossible"</span>);</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> hunwen(w,n,a);<span class="comment">//交换函数 </span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);&#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次循环都使字符串两边的字母匹配，达到局部最优的方案，贪心算法没有固定的算法模式，只有固定的算法思想：局部最优，从而全局最优。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;贪心算法概述：&quot;&gt;&lt;a href=&quot;#贪心算法概述：&quot; class=&quot;headerlink&quot; title=&quot;贪心算法概述：&quot;&gt;&lt;/a&gt;贪心算法概述：&lt;/h3&gt;&lt;p&gt;贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。&lt;/p&gt;
&lt;p&gt;注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://soliym.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="贪心" scheme="http://soliym.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>ps冰雕图片效果</title>
    <link href="http://soliym.top/2018/12/01/ps%E5%86%B0%E9%9B%95%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/"/>
    <id>http://soliym.top/2018/12/01/ps冰雕图片效果/</id>
    <published>2018-12-01T13:42:18.000Z</published>
    <updated>2019-03-29T15:28:31.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ps冰雕图片效果动作"><a href="#ps冰雕图片效果动作" class="headerlink" title="ps冰雕图片效果动作"></a>ps冰雕图片效果动作</h2><p>在csnd上看到的一种ps动作，自己弄了一个.</p><a id="more"></a><p><img src="/2018/12/01/ps冰雕图片效果/20181125190408436.jpg" alt="ps冰雕效果图">  </p><p>这个图片制作很简单，只是素材的获取有点难，我会在后面发上百度网盘链接，有需要可以去下载。</p><h3 id="一、ps软件语言转换"><a href="#一、ps软件语言转换" class="headerlink" title="一、ps软件语言转换"></a>一、ps软件语言转换</h3><p>可能大家部分ps是中文版的，要用这个动作效果需要将ps改为英文版（改的方法很简单，具体教程看下面）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、打开ps所在文件夹（如果不知道安装位置，可右键ps图标点击文件所在位置）  </span><br><span class="line">2、进入Locales/zh_CN/Support Files/文件夹中,修改tw10428。dat文件，将其拓展名修改为其他拓展名  </span><br><span class="line">（比如：txt，只要让软件无法识别该文件就可以），记住该文件的拓展名为dat  </span><br><span class="line">想要中文版将文件拓展名改回dat  </span><br><span class="line">3、重新打开ps，现在改为英文版。</span><br></pre></td></tr></table></figure><h3 id="二、将动作效果加入到ps中"><a href="#二、将动作效果加入到ps中" class="headerlink" title="二、将动作效果加入到ps中"></a>二、将动作效果加入到ps中</h3><p>先将素材下载到电脑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1a3RLxtYP6Nr6RQfoeX_qHQ  </span><br><span class="line">提取码：4o8i</span><br></pre></td></tr></table></figure></p><p>然后将动作放入到ps中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、打开动作窗口（快捷键alt+f9）  </span><br><span class="line">2、点击动作窗口右上角小箭头  </span><br><span class="line">3、点击载入动作，找到下载好的文件（文件拓展名为atn）  </span><br><span class="line">4、现在改动作就在你的ps里面了</span><br></pre></td></tr></table></figure></p><h3 id="三、图片制作"><a href="#三、图片制作" class="headerlink" title="三、图片制作"></a>三、图片制作</h3><p>制作方法很简单，就三步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、将要p的图片放入到ps中  </span><br><span class="line">2、ctrl+shift+n新建一个图层,图层名字改为brush</span><br><span class="line">3、选中要变为冰雕的选区，然后在动作窗口下方点击开始按钮</span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/01/ps冰雕图片效果/QQ截图20181201223845.png" alt="动作开始按钮"><br>图片制作完成–很简单，但是效果很好哈哈哈，有任何问题可以评论哟~~~  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ps冰雕图片效果动作&quot;&gt;&lt;a href=&quot;#ps冰雕图片效果动作&quot; class=&quot;headerlink&quot; title=&quot;ps冰雕图片效果动作&quot;&gt;&lt;/a&gt;ps冰雕图片效果动作&lt;/h2&gt;&lt;p&gt;在csnd上看到的一种ps动作，自己弄了一个.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ps" scheme="http://soliym.top/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>建站分享</title>
    <link href="http://soliym.top/2018/11/26/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://soliym.top/2018/11/26/关于博客的搭建/</id>
    <published>2018-11-26T14:40:01.936Z</published>
    <updated>2019-03-29T15:27:24.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github-Pages-Hexo"><a href="#Github-Pages-Hexo" class="headerlink" title="Github Pages + Hexo"></a>Github Pages + Hexo</h2><p>  我的博客是Github Pages + Hexo在github上搭建的。<br>  下面是我对搭建博客过程中的一些分享<br><a id="more"></a></p><h3 id="一、-Git、node-js"><a href="#一、-Git、node-js" class="headerlink" title="一、 Git、node.js"></a>一、 Git、node.js</h3><p>  先下载安装好<strong>Git、node.js</strong>，具体的过程参照了网上很多的帖子，很多都不是很详细，对于我这种小白来说就是一种折磨（完全看不懂，虽然学了一点前端的HTML、css、js，但这里完全用不上，到是在后面修改主题的时候到是能看明白了。。。。）这些博客里有一个挺详细的，按照他的过程，很容易就弄出来了（其实也不容易。。。。。出现好多问题，当时就很崩溃，明明按照他的步骤完成的，为啥就不通过呢，只能靠着百度一一解决了。。。<br>  <strong>这个帖子有点小错误，可能是环境和版本不同的原因吧</strong>（我搭建的时候有些地方会出错，需要自己去改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://jantc.cn/2017/04/16/%E5%BB%BA%E7%AB%99%E5%88%86%E4%BA%AB%E4%B9%8BGithub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/</span><br></pre></td></tr></table></figure><h3 id="二、Github"><a href="#二、Github" class="headerlink" title="二、Github"></a>二、Github</h3><p>  在github上申请免费的空间来搭建网页，以前西部数码上购买过一个虚拟主机，很贵，一年要几百大洋，主要是国内的主要备案很麻烦，后来就放弃了。在github上可以搭建一个简单的静态网页，虽然是静态的，但是也可以加入很多功能，比如评论、分享系统。用来写写博客或作为个人的自我接受很好用。没有繁琐的管理，搭建好以后只管写博客就好。<br>  <strong>注册GitHub的时候最好是在chrome浏览器中</strong>，因为可以翻译网页，像我这种还没过四级的渣渣，看见这些英文网站就头疼。。。。<br>  具体的注册步骤就不说了，反正我也是看着别人的帖子弄的。。。这个很容易网上就能找到（我忘了我是在按照那个弄的了）</p><h3 id="三、hexo"><a href="#三、hexo" class="headerlink" title="三、hexo"></a>三、hexo</h3><p>配置完hexo本地就算配置完成了，接下来就是将hexo托管到github。<br>  那个_config.yml有两个，<strong>一个是在hexo文件夹下的，另一个是在主题文件夹下的</strong>，一定要分清楚这两个，后面修改主题配置的时候会对这两个文件进行修改。<br>  到这基础的就弄完了，可以说有个简单的博客就搭建完了，不过这时候页面有点丑（太low而且没啥功能），接下来就是对博客的美化-主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g  </span><br><span class="line">hexo s  </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="四、主题"><a href="#四、主题" class="headerlink" title="四、主题"></a>四、主题</h3><p>我使用的是Material X作为博客的主题，想弄的话可以在我们博客的最下面点<strong>Material X</strong>连接，里面有关于这个主题的修改方法，在最下方有主题的源代码，下载后将文件放在主题文件夹中，上传就Ok了，具体的方法可以百度（有时间是话我会写篇文章来详细说一下我是怎样修改的和遇到的问题）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xaoxuu.com/blog/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.wushile.top/</span><br></pre></td></tr></table></figure><h2 id="关于搭建博客"><a href="#关于搭建博客" class="headerlink" title="关于搭建博客"></a>关于搭建博客</h2><p>  博客搭建花了大概四天多的时间才完成对博客的简单搭建，第一次弄博客，遇到了很多很多的问题，几乎都快要放弃了，但想想已经花费的很多的时间去做这个博客，就该把它弄完，从无到有，很庆幸坚持到了最后，从一无所知的小白到完成搭建这个博客，学到了很多知识，在网上查找解决问题的时候也见识到了很多。很久都没有这么专注的去做一件事情，每天就想着一件事，就想把这个博客建好，现在终于把基础搭建完了，不足的地方以后再去修改，千里之行始于足下。这是第一次写博客，很多格式都不动，写的很low，没办法，这会已经快一点，也没时间去学了，明天还有课。这两周可能不会对博客再进行大的修改了，还有两周考数据结构，没时间去美化了，等考完试再去博客进行修改吧    </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github-Pages-Hexo&quot;&gt;&lt;a href=&quot;#Github-Pages-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Github Pages + Hexo&quot;&gt;&lt;/a&gt;Github Pages + Hexo&lt;/h2&gt;&lt;p&gt;  我的博客是Github Pages + Hexo在github上搭建的。&lt;br&gt;  下面是我对搭建博客过程中的一些分享&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://soliym.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://soliym.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://soliym.top/2018/11/25/hello-world/"/>
    <id>http://soliym.top/2018/11/25/hello-world/</id>
    <published>2018-11-25T08:55:32.795Z</published>
    <updated>2019-03-28T15:00:56.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><a id="more"></a><h3 id="first-personalblog"><a href="#first-personalblog" class="headerlink" title="first personalblog"></a>first personalblog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，世界！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://soliym.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://soliym.top/tags/hexo/"/>
    
  </entry>
  
</feed>
