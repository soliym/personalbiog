{"meta":{"title":"soliym","subtitle":null,"description":null,"author":"soliym","url":"http://soliym.top"},"pages":[{"title":"tags","date":"2018-01-04T03:45:41.000Z","updated":"2019-03-10T06:23:45.878Z","comments":true,"path":"tags/index.html","permalink":"http://soliym.top/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2019-03-29T14:17:54.000Z","updated":"2019-03-29T15:33:26.432Z","comments":true,"path":"about/index.html","permalink":"http://soliym.top/about/index.html","excerpt":"","text":"这个人很懒，不想介绍自己~"},{"title":"categories","date":"2019-03-10T06:21:38.000Z","updated":"2019-03-10T06:24:40.167Z","comments":true,"path":"categories/index.html","permalink":"http://soliym.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"贪心算法","slug":"贪心算法","date":"2019-03-30T06:59:22.507Z","updated":"2019-03-30T06:59:22.630Z","comments":true,"path":"2019/03/30/贪心算法/","link":"","permalink":"http://soliym.top/2019/03/30/贪心算法/","excerpt":"贪心算法概述：贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。 注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。","text":"贪心算法概述：贪心算法（贪婪）又叫登山法，它的根本思想为：逐步求解最优解，将问题分解为每个小部分，使每个部分都达到最优解，从而使全局达到最优。贪心算法求解问题得到的解不一定是最优的解。例如Prim算法和Kruskal算法都是使用贪心算法的策略。 注意：有些问题用贪心算法可以达到最优解，但是不是所有问题都是局部最优从而全局最优，面对最优解问题时除了贪心算法以外还有动态规划。 一、完美的代价1、问题描述 回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。 交换的定义是：交换两个相邻的字符 例如mamad 第一次交换 ad : mamda 第二次交换 md : madma 第三次交换 ma : madam (回文！完美！) 输入格式 第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000) 第二行是一个字符串，长度为N.只包含小写字母 输出格式 如果可能，输出最少的交换次数。 否则输出Impossible 样例输入 5mamad 样例输出 3 2、问题分析​ 在输入的字符串中不匹配的字母可能是一个或零，所以可以先找出这个字母，创建一个包含26个空间是数组，分别表示字符串中字母的个数，然后遍历这个数组，如果字母的个数为奇数，则表示该字母为不匹配字母。首先从首字母开始，找到与它匹配的字符，再将它与最后一个字母交换，这样一对匹配的字母就交换完了，如果遇到不匹配的字母，则将它与中间的字母交换，然后在开始遍历。但是问题要求的是相邻的交换，所以这种方法不符合要求。 ​ 我们需要相邻交换，所以要找到交换的起点和终点。求解方法和上面类似，先从首字母开始，在从与字符串的另一方向开始，遍历找到与首字母匹配的字母，记录它的位置，从该位置起，将后一个字母向前一个位置移动，直到与最后，记录交换次数，再将首字母元素赋值给最后一个元素，这样一趟交换完成。 全局循环次数：1 to n/2; 每次循环需判断是否为不匹配元素 匹配元素循环次数：n-i-1 to j(当字母为匹配字母时) 匹配元素移动次数：j to n-i-1 不匹配元素循环次数：i to j(当字母为匹配字母时) 不匹配元素移动次数：j to i 3、源代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;stdio.h&gt;int count=0;//交换次数 void hunwen(char x,int y,char *z)&#123; int i,j,k; for(i=0;i&lt;y/2;i++) &#123; if(z[i]!=x) &#123;//匹配字母情况 j=y-i-1; while(j!=i&amp;&amp;(z[j]!=z[i]))j--; for(k=j;k&lt;y-i-1;k++) &#123; z[k]=z[k+1]; count++; &#125; z[k]=z[i]; &#125; else &#123;//不匹配字母情况 j=i; while(j!=y-i-1&amp;&amp;(z[j]!=z[y-i-1])) j++; for(k=j;k&gt;i;k--) &#123; z[k]=z[k-1]; count++; &#125; z[k]=z[y-i-1]; &#125; &#125;&#125;int main(void)&#123; int n; int i,j=0; char w;//记录不匹配字符 int b[26]=&#123;0&#125;; char a[801]; scanf(\"%d\",&amp;n); getchar();//清除缓存 for(i=0;i&lt;n;i++) scanf(\"%c\",&amp;a[i]); for(i=0;i&lt;n;i++) b[a[i]-97]++; //对字母个数计数 for(i=0;i&lt;26;i++) &#123; if(b[i]%2!=0) &#123; w=i+97; j++; &#125;//遍历找到不匹配字母 &#125; if(j&gt;=2)printf(\"impossible\"); else &#123; hunwen(w,n,a);//交换函数 printf(\"%d\",count);&#125; return 0; &#125; 每一次循环都使字符串两边的字母匹配，达到局部最优的方案，贪心算法没有固定的算法模式，只有固定的算法思想：局部最优，从而全局最优。","categories":[{"name":"算法","slug":"算法","permalink":"http://soliym.top/categories/算法/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"http://soliym.top/tags/贪心/"}]},{"title":"ps冰雕图片效果","slug":"ps冰雕图片效果","date":"2018-12-01T13:42:18.000Z","updated":"2019-03-29T15:28:31.190Z","comments":true,"path":"2018/12/01/ps冰雕图片效果/","link":"","permalink":"http://soliym.top/2018/12/01/ps冰雕图片效果/","excerpt":"ps冰雕图片效果动作在csnd上看到的一种ps动作，自己弄了一个.","text":"ps冰雕图片效果动作在csnd上看到的一种ps动作，自己弄了一个. 这个图片制作很简单，只是素材的获取有点难，我会在后面发上百度网盘链接，有需要可以去下载。 一、ps软件语言转换可能大家部分ps是中文版的，要用这个动作效果需要将ps改为英文版（改的方法很简单，具体教程看下面） 123451、打开ps所在文件夹（如果不知道安装位置，可右键ps图标点击文件所在位置） 2、进入Locales/zh_CN/Support Files/文件夹中,修改tw10428。dat文件，将其拓展名修改为其他拓展名 （比如：txt，只要让软件无法识别该文件就可以），记住该文件的拓展名为dat 想要中文版将文件拓展名改回dat 3、重新打开ps，现在改为英文版。 二、将动作效果加入到ps中先将素材下载到电脑12链接：https://pan.baidu.com/s/1a3RLxtYP6Nr6RQfoeX_qHQ 提取码：4o8i 然后将动作放入到ps中12341、打开动作窗口（快捷键alt+f9） 2、点击动作窗口右上角小箭头 3、点击载入动作，找到下载好的文件（文件拓展名为atn） 4、现在改动作就在你的ps里面了 三、图片制作制作方法很简单，就三步1231、将要p的图片放入到ps中 2、ctrl+shift+n新建一个图层,图层名字改为brush3、选中要变为冰雕的选区，然后在动作窗口下方点击开始按钮 图片制作完成–很简单，但是效果很好哈哈哈，有任何问题可以评论哟~~~","categories":[],"tags":[{"name":"ps","slug":"ps","permalink":"http://soliym.top/tags/ps/"}]},{"title":"建站分享","slug":"关于博客的搭建","date":"2018-11-26T14:40:01.936Z","updated":"2019-03-29T15:27:24.299Z","comments":true,"path":"2018/11/26/关于博客的搭建/","link":"","permalink":"http://soliym.top/2018/11/26/关于博客的搭建/","excerpt":"Github Pages + Hexo 我的博客是Github Pages + Hexo在github上搭建的。 下面是我对搭建博客过程中的一些分享","text":"Github Pages + Hexo 我的博客是Github Pages + Hexo在github上搭建的。 下面是我对搭建博客过程中的一些分享 一、 Git、node.js 先下载安装好Git、node.js，具体的过程参照了网上很多的帖子，很多都不是很详细，对于我这种小白来说就是一种折磨（完全看不懂，虽然学了一点前端的HTML、css、js，但这里完全用不上，到是在后面修改主题的时候到是能看明白了。。。。）这些博客里有一个挺详细的，按照他的过程，很容易就弄出来了（其实也不容易。。。。。出现好多问题，当时就很崩溃，明明按照他的步骤完成的，为啥就不通过呢，只能靠着百度一一解决了。。。 这个帖子有点小错误，可能是环境和版本不同的原因吧（我搭建的时候有些地方会出错，需要自己去改） 1http://jantc.cn/2017/04/16/%E5%BB%BA%E7%AB%99%E5%88%86%E4%BA%AB%E4%B9%8BGithub%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%20(%E4%B8%80)/ 二、Github 在github上申请免费的空间来搭建网页，以前西部数码上购买过一个虚拟主机，很贵，一年要几百大洋，主要是国内的主要备案很麻烦，后来就放弃了。在github上可以搭建一个简单的静态网页，虽然是静态的，但是也可以加入很多功能，比如评论、分享系统。用来写写博客或作为个人的自我接受很好用。没有繁琐的管理，搭建好以后只管写博客就好。 注册GitHub的时候最好是在chrome浏览器中，因为可以翻译网页，像我这种还没过四级的渣渣，看见这些英文网站就头疼。。。。 具体的注册步骤就不说了，反正我也是看着别人的帖子弄的。。。这个很容易网上就能找到（我忘了我是在按照那个弄的了） 三、hexo配置完hexo本地就算配置完成了，接下来就是将hexo托管到github。 那个_config.yml有两个，一个是在hexo文件夹下的，另一个是在主题文件夹下的，一定要分清楚这两个，后面修改主题配置的时候会对这两个文件进行修改。 到这基础的就弄完了，可以说有个简单的博客就搭建完了，不过这时候页面有点丑（太low而且没啥功能），接下来就是对博客的美化-主题 123hexo g hexo s hexo d 四、主题我使用的是Material X作为博客的主题，想弄的话可以在我们博客的最下面点Material X连接，里面有关于这个主题的修改方法，在最下方有主题的源代码，下载后将文件放在主题文件夹中，上传就Ok了，具体的方法可以百度（有时间是话我会写篇文章来详细说一下我是怎样修改的和遇到的问题） 1https://xaoxuu.com/blog/ 1https://www.wushile.top/ 关于搭建博客 博客搭建花了大概四天多的时间才完成对博客的简单搭建，第一次弄博客，遇到了很多很多的问题，几乎都快要放弃了，但想想已经花费的很多的时间去做这个博客，就该把它弄完，从无到有，很庆幸坚持到了最后，从一无所知的小白到完成搭建这个博客，学到了很多知识，在网上查找解决问题的时候也见识到了很多。很久都没有这么专注的去做一件事情，每天就想着一件事，就想把这个博客建好，现在终于把基础搭建完了，不足的地方以后再去修改，千里之行始于足下。这是第一次写博客，很多格式都不动，写的很low，没办法，这会已经快一点，也没时间去学了，明天还有课。这两周可能不会对博客再进行大的修改了，还有两周考数据结构，没时间去美化了，等考完试再去博客进行修改吧","categories":[{"name":"随笔","slug":"随笔","permalink":"http://soliym.top/categories/随笔/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://soliym.top/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-25T08:55:32.795Z","updated":"2019-03-28T15:00:56.177Z","comments":true,"path":"2018/11/25/hello-world/","link":"","permalink":"http://soliym.top/2018/11/25/hello-world/","excerpt":"hello world","text":"hello world first personalblog1你好，世界！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://soliym.top/categories/随笔/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://soliym.top/tags/hexo/"}]}]}